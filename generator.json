{
  "id" : "6752F3FC-139C-4BB4-A593-A781C4EBFD29",
  "chatHistory" : [
    {
      "content" : "<usertask>Напиши приложение на SwiftUI, дизайн должен быть красивым и ярким. Вот описание: Bizpark — это легкое приложение, созданное для сбора бизнес-идей, как только они приходят вам в голову. Добавьте название и краткое описание, чтобы сохранить любую концепцию — будь то продукт, услуга или идея стартапа. Ваши идеи сохраняются в простом списке, который вы можете прокручивать или удалять в любое время.<\/usertask>",
      "role" : "user",
      "id" : "4CD7D572-ACAC-4676-8E98-9DDF0AF9964A",
      "timestamp" : 767610044.665418
    },
    {
      "model" : "anthropic\/claude-3.5-sonnet",
      "content" : "<write_to_file>\n<path>Models\/BusinessIdea.swift<\/path>\n<content>\n1|import Foundation\n2|\n3|struct BusinessIdea: Identifiable, Codable, Equatable {\n4|    let id: UUID\n5|    var title: String\n6|    var description: String\n7|    var createdAt: Date\n8|    \n9|    init(id: UUID = UUID(), title: String, description: String, createdAt: Date = Date()) {\n10|        self.id = id\n11|        self.title = title\n12|        self.description = description\n13|        self.createdAt = createdAt\n14|    }\n15|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>ViewModels\/BusinessIdeasViewModel.swift<\/path>\n<content>\n1|import Foundation\n2|import SwiftUI\n3|\n4|class BusinessIdeasViewModel: ObservableObject {\n5|    @Published var ideas: [BusinessIdea] = []\n6|    private let saveKey = \"SavedBusinessIdeas\"\n7|    \n8|    init() {\n9|        loadIdeas()\n10|    }\n11|    \n12|    func addIdea(title: String, description: String) {\n13|        let idea = BusinessIdea(title: title, description: description)\n14|        ideas.insert(idea, at: 0)\n15|        saveIdeas()\n16|    }\n17|    \n18|    func deleteIdea(at offsets: IndexSet) {\n19|        ideas.remove(atOffsets: offsets)\n20|        saveIdeas()\n21|    }\n22|    \n23|    private func saveIdeas() {\n24|        if let encoded = try? JSONEncoder().encode(ideas) {\n25|            UserDefaults.standard.set(encoded, forKey: saveKey)\n26|        }\n27|    }\n28|    \n29|    private func loadIdeas() {\n30|        if let data = UserDefaults.standard.data(forKey: saveKey),\n31|           let decoded = try? JSONDecoder().decode([BusinessIdea].self, from: data) {\n32|            ideas = decoded\n33|        }\n34|    }\n35|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/AddIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct AddIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    \n7|    @State private var title = \"\"\n8|    @State private var description = \"\"\n9|    @FocusState private var focusedField: Field?\n10|    \n11|    enum Field {\n12|        case title, description\n13|    }\n14|    \n15|    var body: some View {\n16|        NavigationView {\n17|            Form {\n18|                Section {\n19|                    TextField(\"Idea Title\", text: $title)\n20|                        .focused($focusedField, equals: .title)\n21|                        .font(.headline)\n22|                        .submitLabel(.next)\n23|                    \n24|                    TextEditor(text: $description)\n25|                        .focused($focusedField, equals: .description)\n26|                        .frame(height: 150)\n27|                        .font(.body)\n28|                }\n29|            }\n30|            .scrollDismissesKeyboard(.immediately)\n31|            .navigationTitle(\"New Business Idea\")\n32|            .navigationBarTitleDisplayMode(.inline)\n33|            .toolbar {\n34|                ToolbarItem(placement: .navigationBarLeading) {\n35|                    Button(\"Cancel\") {\n36|                        dismiss()\n37|                    }\n38|                }\n39|                \n40|                ToolbarItem(placement: .navigationBarTrailing) {\n41|                    Button(\"Save\") {\n42|                        saveIdea()\n43|                    }\n44|                    .disabled(title.isEmpty || description.isEmpty)\n45|                }\n46|                \n47|                ToolbarItemGroup(placement: .keyboard) {\n48|                    Spacer()\n49|                    Button(focusedField == .title ? \"Next\" : \"Done\") {\n50|                        if focusedField == .title {\n51|                            focusedField = .description\n52|                        } else {\n53|                            focusedField = nil\n54|                        }\n55|                    }\n56|                }\n57|            }\n58|        }\n59|    }\n60|    \n61|    private func saveIdea() {\n62|        viewModel.addIdea(title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n63|                         description: description.trimmingCharacters(in: .whitespacesAndNewlines))\n64|        dismiss()\n65|    }\n66|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/IdeaCardView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct IdeaCardView: View {\n4|    let idea: BusinessIdea\n5|    \n6|    var body: some View {\n7|        VStack(alignment: .leading, spacing: 12) {\n8|            Text(idea.title)\n9|                .font(.title2)\n10|                .fontWeight(.bold)\n11|                .foregroundColor(.primary)\n12|            \n13|            Text(idea.description)\n14|                .font(.body)\n15|                .foregroundColor(.secondary)\n16|                .lineLimit(3)\n17|            \n18|            HStack {\n19|                Image(systemName: \"clock\")\n20|                    .foregroundColor(.secondary)\n21|                Text(idea.createdAt.formatted(date: .abbreviated, time: .shortened))\n22|                    .font(.caption)\n23|                    .foregroundColor(.secondary)\n24|                Spacer()\n25|            }\n26|        }\n27|        .padding()\n28|        .background(\n29|            RoundedRectangle(cornerRadius: 16)\n30|                .fill(Color(.systemBackground))\n31|                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)\n32|        )\n33|        .padding(.horizontal)\n34|        .padding(.vertical, 4)\n35|    }\n36|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    \n7|    var body: some View {\n8|        NavigationView {\n9|            ZStack {\n10|                LinearGradient(\n11|                    gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n12|                    startPoint: .topLeading,\n13|                    endPoint: .bottomTrailing\n14|                )\n15|                .ignoresSafeArea()\n16|                \n17|                ScrollView {\n18|                    if viewModel.ideas.isEmpty {\n19|                        VStack(spacing: 20) {\n20|                            Image(systemName: \"lightbulb\")\n21|                                .font(.system(size: 60))\n22|                                .foregroundColor(.yellow)\n23|                            \n24|                            Text(\"No Business Ideas Yet\")\n25|                                .font(.title2)\n26|                                .fontWeight(.bold)\n27|                            \n28|                            Text(\"Tap the + button to add your first business idea!\")\n29|                                .foregroundColor(.secondary)\n30|                                .multilineTextAlignment(.center)\n31|                                .padding(.horizontal)\n32|                        }\n33|                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n34|                        .padding(.top, 100)\n35|                    } else {\n36|                        LazyVStack(spacing: 0) {\n37|                            ForEach(viewModel.ideas) { idea in\n38|                                IdeaCardView(idea: idea)\n39|                                    .transition(.opacity)\n40|                            }\n41|                            .onDelete(perform: viewModel.deleteIdea)\n42|                        }\n43|                        .padding(.vertical)\n44|                    }\n45|                }\n46|            }\n47|            .navigationTitle(\"Bizpark\")\n48|            .toolbar {\n49|                ToolbarItem(placement: .navigationBarTrailing) {\n50|                    Button {\n51|                        showingAddIdea = true\n52|                    } label: {\n53|                        Image(systemName: \"plus.circle.fill\")\n54|                            .font(.title2)\n55|                    }\n56|                }\n57|            }\n58|            .sheet(isPresented: $showingAddIdea) {\n59|                AddIdeaView(viewModel: viewModel)\n60|            }\n61|        }\n62|    }\n63|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "id" : "FD18D3B5-974A-4D9B-93AA-B3D61386949E",
      "timestamp" : 767610091.761589,
      "fileChanges" : [
        {
          "id" : "34202C69-39A3-42C4-B3CA-45647694492D",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 50
          },
          "type" : "modified",
          "path" : "ContentView.swift"
        },
        {
          "id" : "D8C76E8A-D105-414C-AA9C-A37C6CACE602",
          "changes" : {
            "addedLines" : 36,
            "removedLines" : 0
          },
          "type" : "added",
          "path" : "IdeaCardView.swift"
        },
        {
          "id" : "4B9126E9-5D0D-4CEF-96F6-4A378AAF6F4F",
          "changes" : {
            "addedLines" : 15,
            "removedLines" : 0
          },
          "type" : "added",
          "path" : "BusinessIdea.swift"
        },
        {
          "id" : "5AB469DC-F39B-4901-9C98-27C8EBD58F94",
          "changes" : {
            "addedLines" : 66,
            "removedLines" : 0
          },
          "type" : "added",
          "path" : "AddIdeaView.swift"
        },
        {
          "id" : "ED5F7A19-21B6-408D-B82B-291FADA99400",
          "changes" : {
            "addedLines" : 35,
            "removedLines" : 0
          },
          "type" : "added",
          "path" : "BusinessIdeasViewModel.swift"
        }
      ]
    },
    {
      "content" : "<usertask>добавь в приложение возможность переключения на темную тему\n(кнопки Rate this app, Share this app, Terms of use, Privacy policy).\n(Кнопки  Privacy policy и Terms of use должны вести на экраны с текстом)\n(Кнопка “Rate this app” должна открывать App Store с ссылкой на приложение, а не request review.)<\/usertask>",
      "role" : "user",
      "id" : "F528696C-9E0B-4631-93C1-3207D55E2F9A",
      "timestamp" : 767610297.546261
    },
    {
      "model" : "anthropic\/claude-3.5-sonnet",
      "content" : "<write_to_file>\n<path>Views\/SettingsView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct SettingsView: View {\n4|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n5|    @Environment(\\.openURL) private var openURL\n6|    @State private var showingTerms = false\n7|    @State private var showingPrivacy = false\n8|    \n9|    private let appStoreId = \"YOUR_APP_STORE_ID\" \/\/ Replace with your actual App Store ID\n10|    \n11|    var body: some View {\n12|        List {\n13|            Section {\n14|                Toggle(isOn: $isDarkMode) {\n15|                    Label(\"Dark Mode\", systemImage: \"moon.fill\")\n16|                }\n17|            }\n18|            \n19|            Section {\n20|                Button {\n21|                    shareApp()\n22|                } label: {\n23|                    Label(\"Share App\", systemImage: \"square.and.arrow.up\")\n24|                }\n25|                \n26|                Button {\n27|                    rateApp()\n28|                } label: {\n29|                    Label(\"Rate This App\", systemImage: \"star.fill\")\n30|                }\n31|            }\n32|            \n33|            Section {\n34|                Button {\n35|                    showingTerms = true\n36|                } label: {\n37|                    Label(\"Terms of Use\", systemImage: \"doc.text\")\n38|                }\n39|                \n40|                Button {\n41|                    showingPrivacy = true\n42|                } label: {\n43|                    Label(\"Privacy Policy\", systemImage: \"hand.raised.fill\")\n44|                }\n45|            }\n46|        }\n47|        .navigationTitle(\"Settings\")\n48|        .sheet(isPresented: $showingTerms) {\n49|            TermsView()\n50|        }\n51|        .sheet(isPresented: $showingPrivacy) {\n52|            PrivacyView()\n53|        }\n54|    }\n55|    \n56|    private func shareApp() {\n57|        let appUrl = URL(string: \"https:\/\/apps.apple.com\/app\/id\\(appStoreId)\")!\n58|        let activityVC = UIActivityViewController(\n59|            activityItems: [\"Check out Bizpark!\", appUrl],\n60|            applicationActivities: nil\n61|        )\n62|        \n63|        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,\n64|           let window = windowScene.windows.first,\n65|           let rootVC = window.rootViewController {\n66|            activityVC.popoverPresentationController?.sourceView = rootVC.view\n67|            rootVC.present(activityVC, animated: true)\n68|        }\n69|    }\n70|    \n71|    private func rateApp() {\n72|        let appStoreURL = URL(string: \"https:\/\/apps.apple.com\/app\/id\\(appStoreId)?action=write-review\")!\n73|        openURL(appStoreURL)\n74|    }\n75|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/TermsView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct TermsView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    \n6|    var body: some View {\n7|        NavigationView {\n8|            ScrollView {\n9|                VStack(alignment: .leading, spacing: 20) {\n10|                    Group {\n11|                        Text(\"Terms of Use\")\n12|                            .font(.title)\n13|                            .fontWeight(.bold)\n14|                        \n15|                        Text(\"Last Updated: \\(Date().formatted(date: .long, time: .omitted))\")\n16|                            .foregroundColor(.secondary)\n17|                        \n18|                        Text(\"1. Acceptance of Terms\")\n19|                            .font(.headline)\n20|                        Text(\"By accessing and using Bizpark, you accept and agree to be bound by the terms and provision of this agreement.\")\n21|                        \n22|                        Text(\"2. Use License\")\n23|                            .font(.headline)\n24|                        Text(\"This is a personal, non-exclusive, non-transferable license to use Bizpark for storing and managing your business ideas.\")\n25|                        \n26|                        Text(\"3. Disclaimer\")\n27|                            .font(.headline)\n28|                        Text(\"The app is provided 'as is' without warranties of any kind, either expressed or implied.\")\n29|                        \n30|                        Text(\"4. Limitations\")\n31|                            .font(.headline)\n32|                        Text(\"You may not: (a) modify or copy the materials; (b) use the materials for any commercial purpose; (c) attempt to decompile or reverse engineer any software contained in Bizpark.\")\n33|                    }\n34|                }\n35|                .padding()\n36|            }\n37|            .navigationBarTitleDisplayMode(.inline)\n38|            .toolbar {\n39|                ToolbarItem(placement: .navigationBarTrailing) {\n40|                    Button(\"Done\") {\n41|                        dismiss()\n42|                    }\n43|                }\n44|            }\n45|        }\n46|    }\n47|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/PrivacyView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct PrivacyView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    \n6|    var body: some View {\n7|        NavigationView {\n8|            ScrollView {\n9|                VStack(alignment: .leading, spacing: 20) {\n10|                    Group {\n11|                        Text(\"Privacy Policy\")\n12|                            .font(.title)\n13|                            .fontWeight(.bold)\n14|                        \n15|                        Text(\"Last Updated: \\(Date().formatted(date: .long, time: .omitted))\")\n16|                            .foregroundColor(.secondary)\n17|                        \n18|                        Text(\"Data Collection\")\n19|                            .font(.headline)\n20|                        Text(\"Bizpark does not collect any personal information. All business ideas are stored locally on your device.\")\n21|                        \n22|                        Text(\"Data Storage\")\n23|                            .font(.headline)\n24|                        Text(\"Your business ideas are stored securely on your device and are not transmitted to any external servers.\")\n25|                        \n26|                        Text(\"Third-Party Services\")\n27|                            .font(.headline)\n28|                        Text(\"We do not share any information with third-party services or analytics providers.\")\n29|                        \n30|                        Text(\"Changes to Privacy Policy\")\n31|                            .font(.headline)\n32|                        Text(\"We reserve the right to update our Privacy Policy. Any changes will be reflected on this page.\")\n33|                    }\n34|                }\n35|                .padding()\n36|            }\n37|            .navigationBarTitleDisplayMode(.inline)\n38|            .toolbar {\n39|                ToolbarItem(placement: .navigationBarTrailing) {\n40|                    Button(\"Done\") {\n41|                        dismiss()\n42|                    }\n43|                }\n44|            }\n45|        }\n46|    }\n47|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|    \n8|    var body: some View {\n9|        NavigationView {\n10|            ZStack {\n11|                LinearGradient(\n12|                    gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n13|                    startPoint: .topLeading,\n14|                    endPoint: .bottomTrailing\n15|                )\n16|                .ignoresSafeArea()\n17|                \n18|                ScrollView {\n19|                    if viewModel.ideas.isEmpty {\n20|                        VStack(spacing: 20) {\n21|                            Image(systemName: \"lightbulb\")\n22|                                .font(.system(size: 60))\n23|                                .foregroundColor(.yellow)\n24|                            \n25|                            Text(\"No Business Ideas Yet\")\n26|                                .font(.title2)\n27|                                .fontWeight(.bold)\n28|                            \n29|                            Text(\"Tap the + button to add your first business idea!\")\n30|                                .foregroundColor(.secondary)\n31|                                .multilineTextAlignment(.center)\n32|                                .padding(.horizontal)\n33|                        }\n34|                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n35|                        .padding(.top, 100)\n36|                    } else {\n37|                        LazyVStack(spacing: 0) {\n38|                            ForEach(viewModel.ideas) { idea in\n39|                                IdeaCardView(idea: idea)\n40|                                    .transition(.opacity)\n41|                            }\n42|                            .onDelete(perform: viewModel.deleteIdea)\n43|                        }\n44|                        .padding(.vertical)\n45|                    }\n46|                }\n47|            }\n48|            .navigationTitle(\"Bizpark\")\n49|            .toolbar {\n50|                ToolbarItem(placement: .navigationBarLeading) {\n51|                    NavigationLink(destination: SettingsView()) {\n52|                        Image(systemName: \"gearshape.fill\")\n53|                    }\n54|                }\n55|                \n56|                ToolbarItem(placement: .navigationBarTrailing) {\n57|                    Button {\n58|                        showingAddIdea = true\n59|                    } label: {\n60|                        Image(systemName: \"plus.circle.fill\")\n61|                            .font(.title2)\n62|                    }\n63|                }\n64|            }\n65|            .sheet(isPresented: $showingAddIdea) {\n66|                AddIdeaView(viewModel: viewModel)\n67|            }\n68|        }\n69|        .preferredColorScheme(isDarkMode ? .dark : .light)\n70|    }\n71|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "id" : "770BC30A-AA8C-462E-92E0-4502476EDB3A",
      "timestamp" : 767610350.36978,
      "fileChanges" : [
        {
          "type" : "modified",
          "changes" : {
            "addedLines" : 8,
            "removedLines" : 0
          },
          "id" : "F92CE080-2A8A-4195-AF44-6F6D02B0520D",
          "path" : "ContentView.swift"
        },
        {
          "type" : "added",
          "changes" : {
            "addedLines" : 47,
            "removedLines" : 0
          },
          "id" : "1C8D26D1-625D-4B5E-AE66-21184893EE54",
          "path" : "PrivacyView.swift"
        },
        {
          "type" : "added",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 47
          },
          "id" : "7101EA52-A874-4CF6-9F34-786373005CDF",
          "path" : "TermsView.swift"
        },
        {
          "type" : "added",
          "changes" : {
            "addedLines" : 75,
            "removedLines" : 0
          },
          "id" : "2A52CF3E-920C-4819-BD45-F2B9B39053C4",
          "path" : "SettingsView.swift"
        }
      ]
    },
    {
      "id" : "0395B027-6AC1-48E2-9D81-96F7EE793632",
      "timestamp" : 767610528.269229,
      "content" : "<usertask>После добавления новой карточки поля ввода очищаются, и пользователь возвращается на первую вкладку таббара.\nПоявляется уведомление об успешном добавлении.\nDetail View должен быть кастомным, с кнопками редактировать, удалить, поделиться.\nДизайн должен быть юзерфрендли, с яркими элементами.\nдобавь в приложение возможность переключения на темную тему\nсдеалай возможность вносить не целые числа\nкарточки должны сохраняться при перезапуске приложения<\/usertask>",
      "role" : "user"
    },
    {
      "id" : "229DD6F5-ACA3-4563-A2DE-36BCB69599A8",
      "timestamp" : 767610592.798662,
      "model" : "anthropic\/claude-3.5-sonnet",
      "content" : "<write_to_file>\n<path>Models\/BusinessIdea.swift<\/path>\n<content>\n1|import Foundation\n2|\n3|struct BusinessIdea: Identifiable, Codable, Equatable {\n4|    let id: UUID\n5|    var title: String\n6|    var description: String\n7|    var createdAt: Date\n8|    var budget: Double?\n9|    \n10|    init(id: UUID = UUID(), title: String, description: String, budget: Double? = nil, createdAt: Date = Date()) {\n11|        self.id = id\n12|        self.title = title\n13|        self.description = description\n14|        self.budget = budget\n15|        self.createdAt = createdAt\n16|    }\n17|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/IdeaDetailView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct IdeaDetailView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    let idea: BusinessIdea\n7|    \n8|    @State private var showingEditSheet = false\n9|    @State private var showingDeleteAlert = false\n10|    \n11|    var body: some View {\n12|        ScrollView {\n13|            VStack(alignment: .leading, spacing: 24) {\n14|                VStack(alignment: .leading, spacing: 12) {\n15|                    Text(idea.title)\n16|                        .font(.title)\n17|                        .fontWeight(.bold)\n18|                    \n19|                    Text(idea.createdAt.formatted(date: .long, time: .shortened))\n20|                        .font(.subheadline)\n21|                        .foregroundColor(.secondary)\n22|                }\n23|                .frame(maxWidth: .infinity, alignment: .leading)\n24|                .padding()\n25|                .background(\n26|                    RoundedRectangle(cornerRadius: 16)\n27|                        .fill(Color.accentColor.opacity(0.1))\n28|                )\n29|                \n30|                VStack(alignment: .leading, spacing: 8) {\n31|                    Text(\"Description\")\n32|                        .font(.headline)\n33|                    \n34|                    Text(idea.description)\n35|                        .lineSpacing(4)\n36|                }\n37|                \n38|                if let budget = idea.budget {\n39|                    VStack(alignment: .leading, spacing: 8) {\n40|                        Text(\"Estimated Budget\")\n41|                            .font(.headline)\n42|                        \n43|                        Text(String(format: \"$%.2f\", budget))\n44|                            .font(.title2)\n45|                            .foregroundColor(.green)\n46|                    }\n47|                }\n48|                \n49|                HStack(spacing: 16) {\n50|                    Button(action: {\n51|                        showingEditSheet = true\n52|                    }) {\n53|                        Label(\"Edit\", systemImage: \"pencil\")\n54|                            .frame(maxWidth: .infinity)\n55|                    }\n56|                    .buttonStyle(.bordered)\n57|                    .tint(.blue)\n58|                    \n59|                    Button(action: {\n60|                        shareIdea()\n61|                    }) {\n62|                        Label(\"Share\", systemImage: \"square.and.arrow.up\")\n63|                            .frame(maxWidth: .infinity)\n64|                    }\n65|                    .buttonStyle(.bordered)\n66|                    .tint(.green)\n67|                }\n68|                \n69|                Button(action: {\n70|                    showingDeleteAlert = true\n71|                }) {\n72|                    Label(\"Delete Idea\", systemImage: \"trash\")\n73|                        .frame(maxWidth: .infinity)\n74|                }\n75|                .buttonStyle(.bordered)\n76|                .tint(.red)\n77|            }\n78|            .padding()\n79|        }\n80|        .navigationBarTitleDisplayMode(.inline)\n81|        .sheet(isPresented: $showingEditSheet) {\n82|            EditIdeaView(viewModel: viewModel, idea: idea)\n83|        }\n84|        .alert(\"Delete Idea\", isPresented: $showingDeleteAlert) {\n85|            Button(\"Delete\", role: .destructive) {\n86|                deleteIdea()\n87|            }\n88|            Button(\"Cancel\", role: .cancel) { }\n89|        } message: {\n90|            Text(\"Are you sure you want to delete this idea? This action cannot be undone.\")\n91|        }\n92|    }\n93|    \n94|    private func shareIdea() {\n95|        let shareText = \"\"\"\n96|        Business Idea: \\(idea.title)\n97|        \n98|        Description:\n99|        \\(idea.description)\n100|        \n101|        \\(idea.budget.map { String(format: \"Estimated Budget: $%.2f\", $0) } ?? \"\")\n102|        \n103|        Shared from Bizpark\n104|        \"\"\"\n105|        \n106|        let av = UIActivityViewController(\n107|            activityItems: [shareText],\n108|            applicationActivities: nil\n109|        )\n110|        \n111|        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,\n112|           let window = windowScene.windows.first,\n113|           let rootVC = window.rootViewController {\n114|            av.popoverPresentationController?.sourceView = rootVC.view\n115|            rootVC.present(av, animated: true)\n116|        }\n117|    }\n118|    \n119|    private func deleteIdea() {\n120|        viewModel.deleteIdea(withId: idea.id)\n121|        dismiss()\n122|    }\n123|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/EditIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct EditIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    let idea: BusinessIdea\n7|    \n8|    @State private var title: String\n9|    @State private var description: String\n10|    @State private var budget: String\n11|    @FocusState private var focusedField: Field?\n12|    \n13|    enum Field {\n14|        case title, description, budget\n15|    }\n16|    \n17|    init(viewModel: BusinessIdeasViewModel, idea: BusinessIdea) {\n18|        self.viewModel = viewModel\n19|        self.idea = idea\n20|        _title = State(initialValue: idea.title)\n21|        _description = State(initialValue: idea.description)\n22|        _budget = State(initialValue: idea.budget.map { String(format: \"%.2f\", $0) } ?? \"\")\n23|    }\n24|    \n25|    var body: some View {\n26|        NavigationView {\n27|            Form {\n28|                Section {\n29|                    TextField(\"Title\", text: $title)\n30|                        .focused($focusedField, equals: .title)\n31|                        .font(.headline)\n32|                        .submitLabel(.next)\n33|                    \n34|                    TextEditor(text: $description)\n35|                        .focused($focusedField, equals: .description)\n36|                        .frame(height: 150)\n37|                    \n38|                    TextField(\"Budget (Optional)\", text: $budget)\n39|                        .focused($focusedField, equals: .budget)\n40|                        .keyboardType(.decimalPad)\n41|                        .submitLabel(.done)\n42|                }\n43|            }\n44|            .navigationTitle(\"Edit Idea\")\n45|            .navigationBarTitleDisplayMode(.inline)\n46|            .toolbar {\n47|                ToolbarItem(placement: .navigationBarLeading) {\n48|                    Button(\"Cancel\") {\n49|                        dismiss()\n50|                    }\n51|                }\n52|                \n53|                ToolbarItem(placement: .navigationBarTrailing) {\n54|                    Button(\"Save\") {\n55|                        saveIdea()\n56|                    }\n57|                    .disabled(title.isEmpty || description.isEmpty)\n58|                }\n59|                \n60|                ToolbarItemGroup(placement: .keyboard) {\n61|                    Spacer()\n62|                    Button(focusedField == .budget ? \"Done\" : \"Next\") {\n63|                        switch focusedField {\n64|                        case .title:\n65|                            focusedField = .description\n66|                        case .description:\n67|                            focusedField = .budget\n68|                        default:\n69|                            focusedField = nil\n70|                        }\n71|                    }\n72|                }\n73|            }\n74|        }\n75|    }\n76|    \n77|    private func saveIdea() {\n78|        let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n79|        viewModel.updateIdea(\n80|            id: idea.id,\n81|            title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n82|            description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n83|            budget: budgetValue\n84|        )\n85|        dismiss()\n86|    }\n87|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/AddIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct AddIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    \n7|    @State private var title = \"\"\n8|    @State private var description = \"\"\n9|    @State private var budget = \"\"\n10|    @FocusState private var focusedField: Field?\n11|    \n12|    enum Field {\n13|        case title, description, budget\n14|    }\n15|    \n16|    var body: some View {\n17|        NavigationView {\n18|            Form {\n19|                Section {\n20|                    TextField(\"Idea Title\", text: $title)\n21|                        .focused($focusedField, equals: .title)\n22|                        .font(.headline)\n23|                        .submitLabel(.next)\n24|                    \n25|                    TextEditor(text: $description)\n26|                        .focused($focusedField, equals: .description)\n27|                        .frame(height: 150)\n28|                        .font(.body)\n29|                    \n30|                    TextField(\"Estimated Budget (Optional)\", text: $budget)\n31|                        .focused($focusedField, equals: .budget)\n32|                        .keyboardType(.decimalPad)\n33|                        .submitLabel(.done)\n34|                }\n35|            }\n36|            .scrollDismissesKeyboard(.immediately)\n37|            .navigationTitle(\"New Business Idea\")\n38|            .navigationBarTitleDisplayMode(.inline)\n39|            .toolbar {\n40|                ToolbarItem(placement: .navigationBarLeading) {\n41|                    Button(\"Cancel\") {\n42|                        dismiss()\n43|                    }\n44|                }\n45|                \n46|                ToolbarItem(placement: .navigationBarTrailing) {\n47|                    Button(\"Save\") {\n48|                        saveIdea()\n49|                    }\n50|                    .disabled(title.isEmpty || description.isEmpty)\n51|                }\n52|                \n53|                ToolbarItemGroup(placement: .keyboard) {\n54|                    Spacer()\n55|                    Button(nextButtonTitle) {\n56|                        handleNextButton()\n57|                    }\n58|                }\n59|            }\n60|        }\n61|    }\n62|    \n63|    private var nextButtonTitle: String {\n64|        switch focusedField {\n65|        case .title:\n66|            return \"Next\"\n67|        case .description:\n68|            return \"Next\"\n69|        case .budget:\n70|            return \"Done\"\n71|        case .none:\n72|            return \"Done\"\n73|        }\n74|    }\n75|    \n76|    private func handleNextButton() {\n77|        switch focusedField {\n78|        case .title:\n79|            focusedField = .description\n80|        case .description:\n81|            focusedField = .budget\n82|        case .budget:\n83|            focusedField = nil\n84|        case .none:\n85|            break\n86|        }\n87|    }\n88|    \n89|    private func saveIdea() {\n90|        let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n91|        viewModel.addIdea(\n92|            title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n93|            description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n94|            budget: budgetValue\n95|        )\n96|        dismiss()\n97|    }\n98|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>ViewModels\/BusinessIdeasViewModel.swift<\/path>\n<content>\n1|import Foundation\n2|import SwiftUI\n3|\n4|class BusinessIdeasViewModel: ObservableObject {\n5|    @Published var ideas: [BusinessIdea] = []\n6|    @Published var showSuccessNotification = false\n7|    private let saveKey = \"SavedBusinessIdeas\"\n8|    \n9|    init() {\n10|        loadIdeas()\n11|    }\n12|    \n13|    func addIdea(title: String, description: String, budget: Double? = nil) {\n14|        let idea = BusinessIdea(title: title, description: description, budget: budget)\n15|        ideas.insert(idea, at: 0)\n16|        saveIdeas()\n17|        showSuccessNotification = true\n18|        \n19|        \/\/ Hide notification after 2 seconds\n20|        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n21|            self.showSuccessNotification = false\n22|        }\n23|    }\n24|    \n25|    func updateIdea(id: UUID, title: String, description: String, budget: Double?) {\n26|        if let index = ideas.firstIndex(where: { $0.id == id }) {\n27|            ideas[index] = BusinessIdea(\n28|                id: id,\n29|                title: title,\n30|                description: description,\n31|                budget: budget,\n32|                createdAt: ideas[index].createdAt\n33|            )\n34|            saveIdeas()\n35|        }\n36|    }\n37|    \n38|    func deleteIdea(at offsets: IndexSet) {\n39|        ideas.remove(atOffsets: offsets)\n40|        saveIdeas()\n41|    }\n42|    \n43|    func deleteIdea(withId id: UUID) {\n44|        ideas.removeAll { $0.id == id }\n45|        saveIdeas()\n46|    }\n47|    \n48|    private func saveIdeas() {\n49|        if let encoded = try? JSONEncoder().encode(ideas) {\n50|            UserDefaults.standard.set(encoded, forKey: saveKey)\n51|        }\n52|    }\n53|    \n54|    private func loadIdeas() {\n55|        if let data = UserDefaults.standard.data(forKey: saveKey),\n56|           let decoded = try? JSONDecoder().decode([BusinessIdea].self, from: data) {\n57|            ideas = decoded\n58|        }\n59|    }\n60|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|    \n8|    var body: some View {\n9|        NavigationView {\n10|            ZStack {\n11|                LinearGradient(\n12|                    gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n13|                    startPoint: .topLeading,\n14|                    endPoint: .bottomTrailing\n15|                )\n16|                .ignoresSafeArea()\n17|                \n18|                ScrollView {\n19|                    if viewModel.ideas.isEmpty {\n20|                        VStack(spacing: 20) {\n21|                            Image(systemName: \"lightbulb\")\n22|                                .font(.system(size: 60))\n23|                                .foregroundColor(.yellow)\n24|                                .symbolEffect(.bounce)\n25|                            \n26|                            Text(\"No Business Ideas Yet\")\n27|                                .font(.title2)\n28|                                .fontWeight(.bold)\n29|                            \n30|                            Text(\"Tap the + button to add your first business idea!\")\n31|                                .foregroundColor(.secondary)\n32|                                .multilineTextAlignment(.center)\n33|                                .padding(.horizontal)\n34|                        }\n35|                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n36|                        .padding(.top, 100)\n37|                    } else {\n38|                        LazyVStack(spacing: 0) {\n39|                            ForEach(viewModel.ideas) { idea in\n40|                                NavigationLink(destination: IdeaDetailView(viewModel: viewModel, idea: idea)) {\n41|                                    IdeaCardView(idea: idea)\n42|                                }\n43|                            }\n44|                        }\n45|                        .padding(.vertical)\n46|                    }\n47|                }\n48|                \n49|                if viewModel.showSuccessNotification {\n50|                    VStack {\n51|                        Spacer()\n52|                        HStack {\n53|                            Image(systemName: \"checkmark.circle.fill\")\n54|                                .foregroundColor(.green)\n55|                            Text(\"Idea successfully added!\")\n56|                                .foregroundColor(.white)\n57|                        }\n58|                        .padding()\n59|                        .background(Color.black.opacity(0.8))\n60|                        .cornerRadius(25)\n61|                        .padding(.bottom, 20)\n62|                    }\n63|                    .transition(.move(edge: .bottom))\n64|                    .animation(.spring(), value: viewModel.showSuccessNotification)\n65|                }\n66|            }\n67|            .navigationTitle(\"Bizpark\")\n68|            .toolbar {\n69|                ToolbarItem(placement: .navigationBarLeading) {\n70|                    NavigationLink(destination: SettingsView()) {\n71|                        Image(systemName: \"gearshape.fill\")\n72|                    }\n73|                }\n74|                \n75|                ToolbarItem(placement: .navigationBarTrailing) {\n76|                    Button {\n77|                        showingAddIdea = true\n78|                    } label: {\n79|                        Image(systemName: \"plus.circle.fill\")\n80|                            .font(.title2)\n81|                    }\n82|                }\n83|            }\n84|            .sheet(isPresented: $showingAddIdea) {\n85|                AddIdeaView(viewModel: viewModel)\n86|            }\n87|        }\n88|        .preferredColorScheme(isDarkMode ? .dark : .light)\n89|    }\n90|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/IdeaCardView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct IdeaCardView: View {\n4|    let idea: BusinessIdea\n5|    \n6|    var body: some View {\n7|        VStack(alignment: .leading, spacing: 12) {\n8|            Text(idea.title)\n9|                .font(.title2)\n10|                .fontWeight(.bold)\n11|                .foregroundColor(.primary)\n12|            \n13|            Text(idea.description)\n14|                .font(.body)\n15|                .foregroundColor(.secondary)\n16|                .lineLimit(3)\n17|            \n18|            HStack {\n19|                Image(systemName: \"clock\")\n20|                    .foregroundColor(.secondary)\n21|                Text(idea.createdAt.formatted(date: .abbreviated, time: .shortened))\n22|                    .font(.caption)\n23|                    .foregroundColor(.secondary)\n24|                \n25|                Spacer()\n26|                \n27|                if let budget = idea.budget {\n28|                    Text(String(format: \"$%.2f\", budget))\n29|                        .font(.callout)\n30|                        .fontWeight(.semibold)\n31|                        .foregroundColor(.green)\n32|                }\n33|            }\n34|        }\n35|        .padding()\n36|        .background(\n37|            RoundedRectangle(cornerRadius: 16)\n38|                .fill(Color(.systemBackground))\n39|                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)\n40|        )\n41|        .padding(.horizontal)\n42|        .padding(.vertical, 4)\n43|    }\n44|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "fileChanges" : [
        {
          "type" : "added",
          "path" : "IdeaDetailView.swift",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 123
          },
          "id" : "9D4A6F76-0182-4B92-A533-DCC3DCDE508B"
        },
        {
          "type" : "modified",
          "path" : "BusinessIdea.swift",
          "changes" : {
            "addedLines" : 2,
            "removedLines" : 0
          },
          "id" : "A7C12CBF-DDF1-4B55-AA1B-8ACE90C6AFAE"
        },
        {
          "type" : "modified",
          "path" : "AddIdeaView.swift",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 32
          },
          "id" : "CFA83612-967F-413D-89D8-0330338C4303"
        },
        {
          "type" : "modified",
          "path" : "IdeaCardView.swift",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 8
          },
          "id" : "3C776FE2-65FA-49CE-B318-54D40CE651D4"
        },
        {
          "type" : "modified",
          "path" : "BusinessIdeasViewModel.swift",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 25
          },
          "id" : "B24FB8C3-FFCA-45F9-9765-684451054A36"
        },
        {
          "type" : "modified",
          "path" : "ContentView.swift",
          "changes" : {
            "addedLines" : 19,
            "removedLines" : 0
          },
          "id" : "C5575839-81F4-40A7-BEE7-AF8C27DD4D8B"
        },
        {
          "type" : "added",
          "path" : "EditIdeaView.swift",
          "changes" : {
            "addedLines" : 87,
            "removedLines" : 0
          },
          "id" : "7E7E9BA2-D8E4-41B7-B93E-081E7A1B5B97"
        }
      ]
    },
    {
      "role" : "user",
      "timestamp" : 767610606.621573,
      "content" : "<usertask>\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/ContentView.swift:24:34 'symbolEffect(_:options:isActive:)' is only available in iOS 17.0 or newer\n\n\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/ContentView.swift:24:48 'bounce' is only available in iOS 17.0 or newer<\/usertask>",
      "id" : "5F1F8DAF-6557-4E95-AB89-F7989B4C770F"
    },
    {
      "role" : "assistant",
      "timestamp" : 767610621.79734,
      "model" : "anthropic\/claude-3.5-sonnet",
      "content" : "<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|    @State private var isAnimating = false\n8|    \n9|    var body: some View {\n10|        NavigationView {\n11|            ZStack {\n12|                LinearGradient(\n13|                    gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n14|                    startPoint: .topLeading,\n15|                    endPoint: .bottomTrailing\n16|                )\n17|                .ignoresSafeArea()\n18|                \n19|                ScrollView {\n20|                    if viewModel.ideas.isEmpty {\n21|                        VStack(spacing: 20) {\n22|                            Image(systemName: \"lightbulb\")\n23|                                .font(.system(size: 60))\n24|                                .foregroundColor(.yellow)\n25|                                .scaleEffect(isAnimating ? 1.1 : 1.0)\n26|                                .animation(\n27|                                    Animation.easeInOut(duration: 1.0)\n28|                                        .repeatForever(autoreverses: true),\n29|                                    value: isAnimating\n30|                                )\n31|                                .onAppear {\n32|                                    isAnimating = true\n33|                                }\n34|                            \n35|                            Text(\"No Business Ideas Yet\")\n36|                                .font(.title2)\n37|                                .fontWeight(.bold)\n38|                            \n39|                            Text(\"Tap the + button to add your first business idea!\")\n40|                                .foregroundColor(.secondary)\n41|                                .multilineTextAlignment(.center)\n42|                                .padding(.horizontal)\n43|                        }\n44|                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n45|                        .padding(.top, 100)\n46|                    } else {\n47|                        LazyVStack(spacing: 0) {\n48|                            ForEach(viewModel.ideas) { idea in\n49|                                NavigationLink(destination: IdeaDetailView(viewModel: viewModel, idea: idea)) {\n50|                                    IdeaCardView(idea: idea)\n51|                                }\n52|                            }\n53|                        }\n54|                        .padding(.vertical)\n55|                    }\n56|                }\n57|                \n58|                if viewModel.showSuccessNotification {\n59|                    VStack {\n60|                        Spacer()\n61|                        HStack {\n62|                            Image(systemName: \"checkmark.circle.fill\")\n63|                                .foregroundColor(.green)\n64|                            Text(\"Idea successfully added!\")\n65|                                .foregroundColor(.white)\n66|                        }\n67|                        .padding()\n68|                        .background(Color.black.opacity(0.8))\n69|                        .cornerRadius(25)\n70|                        .padding(.bottom, 20)\n71|                    }\n72|                    .transition(.move(edge: .bottom))\n73|                    .animation(.spring(), value: viewModel.showSuccessNotification)\n74|                }\n75|            }\n76|            .navigationTitle(\"Bizpark\")\n77|            .toolbar {\n78|                ToolbarItem(placement: .navigationBarLeading) {\n79|                    NavigationLink(destination: SettingsView()) {\n80|                        Image(systemName: \"gearshape.fill\")\n81|                    }\n82|                }\n83|                \n84|                ToolbarItem(placement: .navigationBarTrailing) {\n85|                    Button {\n86|                        showingAddIdea = true\n87|                    } label: {\n88|                        Image(systemName: \"plus.circle.fill\")\n89|                            .font(.title2)\n90|                    }\n91|                }\n92|            }\n93|            .sheet(isPresented: $showingAddIdea) {\n94|                AddIdeaView(viewModel: viewModel)\n95|            }\n96|        }\n97|        .preferredColorScheme(isDarkMode ? .dark : .light)\n98|    }\n99|}\n<\/content>\n<\/write_to_file>",
      "fileChanges" : [
        {
          "id" : "6E7CD1AF-9807-4D47-BDC2-D060E75243C2",
          "path" : "ContentView.swift",
          "type" : "modified",
          "changes" : {
            "addedLines" : 9,
            "removedLines" : 0
          }
        }
      ],
      "id" : "2832D4EA-0993-447B-8760-69FD332CE79A"
    }
  ],
  "bundleId" : "com.Bizpark.bznt9304",
  "teamId" : "com.Bizpark.bznt9304",
  "location" : "\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark",
  "name" : "Bizpark",
  "lastModified" : 767609919.119366,
  "template" : "AppProject",
  "files" : [
    "\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/ContentView.swift"
  ]
}
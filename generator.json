{
  "name" : "Bizpark",
  "files" : [
    "\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/ViewModels\/BusinessIdeasViewModel.swift"
  ],
  "template" : "AppProject",
  "bundleId" : "com.Bizpark.bznt9304",
  "teamId" : "com.Bizpark.bznt9304",
  "location" : "\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark",
  "chatHistory" : [
    {
      "id" : "4CD7D572-ACAC-4676-8E98-9DDF0AF9964A",
      "content" : "<usertask>Напиши приложение на SwiftUI, дизайн должен быть красивым и ярким. Вот описание: Bizpark — это легкое приложение, созданное для сбора бизнес-идей, как только они приходят вам в голову. Добавьте название и краткое описание, чтобы сохранить любую концепцию — будь то продукт, услуга или идея стартапа. Ваши идеи сохраняются в простом списке, который вы можете прокручивать или удалять в любое время.<\/usertask>",
      "role" : "user",
      "timestamp" : 767610044.665418
    },
    {
      "fileChanges" : [
        {
          "changes" : {
            "addedLines" : 50,
            "removedLines" : 0
          },
          "path" : "ContentView.swift",
          "id" : "34202C69-39A3-42C4-B3CA-45647694492D",
          "type" : "modified"
        },
        {
          "changes" : {
            "addedLines" : 36,
            "removedLines" : 0
          },
          "path" : "IdeaCardView.swift",
          "id" : "D8C76E8A-D105-414C-AA9C-A37C6CACE602",
          "type" : "added"
        },
        {
          "changes" : {
            "addedLines" : 15,
            "removedLines" : 0
          },
          "path" : "BusinessIdea.swift",
          "id" : "4B9126E9-5D0D-4CEF-96F6-4A378AAF6F4F",
          "type" : "added"
        },
        {
          "changes" : {
            "addedLines" : 66,
            "removedLines" : 0
          },
          "path" : "AddIdeaView.swift",
          "id" : "5AB469DC-F39B-4901-9C98-27C8EBD58F94",
          "type" : "added"
        },
        {
          "changes" : {
            "addedLines" : 35,
            "removedLines" : 0
          },
          "path" : "BusinessIdeasViewModel.swift",
          "id" : "ED5F7A19-21B6-408D-B82B-291FADA99400",
          "type" : "added"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "FD18D3B5-974A-4D9B-93AA-B3D61386949E",
      "content" : "<write_to_file>\n<path>Models\/BusinessIdea.swift<\/path>\n<content>\n1|import Foundation\n2|\n3|struct BusinessIdea: Identifiable, Codable, Equatable {\n4|    let id: UUID\n5|    var title: String\n6|    var description: String\n7|    var createdAt: Date\n8|    \n9|    init(id: UUID = UUID(), title: String, description: String, createdAt: Date = Date()) {\n10|        self.id = id\n11|        self.title = title\n12|        self.description = description\n13|        self.createdAt = createdAt\n14|    }\n15|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>ViewModels\/BusinessIdeasViewModel.swift<\/path>\n<content>\n1|import Foundation\n2|import SwiftUI\n3|\n4|class BusinessIdeasViewModel: ObservableObject {\n5|    @Published var ideas: [BusinessIdea] = []\n6|    private let saveKey = \"SavedBusinessIdeas\"\n7|    \n8|    init() {\n9|        loadIdeas()\n10|    }\n11|    \n12|    func addIdea(title: String, description: String) {\n13|        let idea = BusinessIdea(title: title, description: description)\n14|        ideas.insert(idea, at: 0)\n15|        saveIdeas()\n16|    }\n17|    \n18|    func deleteIdea(at offsets: IndexSet) {\n19|        ideas.remove(atOffsets: offsets)\n20|        saveIdeas()\n21|    }\n22|    \n23|    private func saveIdeas() {\n24|        if let encoded = try? JSONEncoder().encode(ideas) {\n25|            UserDefaults.standard.set(encoded, forKey: saveKey)\n26|        }\n27|    }\n28|    \n29|    private func loadIdeas() {\n30|        if let data = UserDefaults.standard.data(forKey: saveKey),\n31|           let decoded = try? JSONDecoder().decode([BusinessIdea].self, from: data) {\n32|            ideas = decoded\n33|        }\n34|    }\n35|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/AddIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct AddIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    \n7|    @State private var title = \"\"\n8|    @State private var description = \"\"\n9|    @FocusState private var focusedField: Field?\n10|    \n11|    enum Field {\n12|        case title, description\n13|    }\n14|    \n15|    var body: some View {\n16|        NavigationView {\n17|            Form {\n18|                Section {\n19|                    TextField(\"Idea Title\", text: $title)\n20|                        .focused($focusedField, equals: .title)\n21|                        .font(.headline)\n22|                        .submitLabel(.next)\n23|                    \n24|                    TextEditor(text: $description)\n25|                        .focused($focusedField, equals: .description)\n26|                        .frame(height: 150)\n27|                        .font(.body)\n28|                }\n29|            }\n30|            .scrollDismissesKeyboard(.immediately)\n31|            .navigationTitle(\"New Business Idea\")\n32|            .navigationBarTitleDisplayMode(.inline)\n33|            .toolbar {\n34|                ToolbarItem(placement: .navigationBarLeading) {\n35|                    Button(\"Cancel\") {\n36|                        dismiss()\n37|                    }\n38|                }\n39|                \n40|                ToolbarItem(placement: .navigationBarTrailing) {\n41|                    Button(\"Save\") {\n42|                        saveIdea()\n43|                    }\n44|                    .disabled(title.isEmpty || description.isEmpty)\n45|                }\n46|                \n47|                ToolbarItemGroup(placement: .keyboard) {\n48|                    Spacer()\n49|                    Button(focusedField == .title ? \"Next\" : \"Done\") {\n50|                        if focusedField == .title {\n51|                            focusedField = .description\n52|                        } else {\n53|                            focusedField = nil\n54|                        }\n55|                    }\n56|                }\n57|            }\n58|        }\n59|    }\n60|    \n61|    private func saveIdea() {\n62|        viewModel.addIdea(title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n63|                         description: description.trimmingCharacters(in: .whitespacesAndNewlines))\n64|        dismiss()\n65|    }\n66|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/IdeaCardView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct IdeaCardView: View {\n4|    let idea: BusinessIdea\n5|    \n6|    var body: some View {\n7|        VStack(alignment: .leading, spacing: 12) {\n8|            Text(idea.title)\n9|                .font(.title2)\n10|                .fontWeight(.bold)\n11|                .foregroundColor(.primary)\n12|            \n13|            Text(idea.description)\n14|                .font(.body)\n15|                .foregroundColor(.secondary)\n16|                .lineLimit(3)\n17|            \n18|            HStack {\n19|                Image(systemName: \"clock\")\n20|                    .foregroundColor(.secondary)\n21|                Text(idea.createdAt.formatted(date: .abbreviated, time: .shortened))\n22|                    .font(.caption)\n23|                    .foregroundColor(.secondary)\n24|                Spacer()\n25|            }\n26|        }\n27|        .padding()\n28|        .background(\n29|            RoundedRectangle(cornerRadius: 16)\n30|                .fill(Color(.systemBackground))\n31|                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)\n32|        )\n33|        .padding(.horizontal)\n34|        .padding(.vertical, 4)\n35|    }\n36|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    \n7|    var body: some View {\n8|        NavigationView {\n9|            ZStack {\n10|                LinearGradient(\n11|                    gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n12|                    startPoint: .topLeading,\n13|                    endPoint: .bottomTrailing\n14|                )\n15|                .ignoresSafeArea()\n16|                \n17|                ScrollView {\n18|                    if viewModel.ideas.isEmpty {\n19|                        VStack(spacing: 20) {\n20|                            Image(systemName: \"lightbulb\")\n21|                                .font(.system(size: 60))\n22|                                .foregroundColor(.yellow)\n23|                            \n24|                            Text(\"No Business Ideas Yet\")\n25|                                .font(.title2)\n26|                                .fontWeight(.bold)\n27|                            \n28|                            Text(\"Tap the + button to add your first business idea!\")\n29|                                .foregroundColor(.secondary)\n30|                                .multilineTextAlignment(.center)\n31|                                .padding(.horizontal)\n32|                        }\n33|                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n34|                        .padding(.top, 100)\n35|                    } else {\n36|                        LazyVStack(spacing: 0) {\n37|                            ForEach(viewModel.ideas) { idea in\n38|                                IdeaCardView(idea: idea)\n39|                                    .transition(.opacity)\n40|                            }\n41|                            .onDelete(perform: viewModel.deleteIdea)\n42|                        }\n43|                        .padding(.vertical)\n44|                    }\n45|                }\n46|            }\n47|            .navigationTitle(\"Bizpark\")\n48|            .toolbar {\n49|                ToolbarItem(placement: .navigationBarTrailing) {\n50|                    Button {\n51|                        showingAddIdea = true\n52|                    } label: {\n53|                        Image(systemName: \"plus.circle.fill\")\n54|                            .font(.title2)\n55|                    }\n56|                }\n57|            }\n58|            .sheet(isPresented: $showingAddIdea) {\n59|                AddIdeaView(viewModel: viewModel)\n60|            }\n61|        }\n62|    }\n63|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767610091.761589
    },
    {
      "id" : "F528696C-9E0B-4631-93C1-3207D55E2F9A",
      "content" : "<usertask>добавь в приложение возможность переключения на темную тему\n(кнопки Rate this app, Share this app, Terms of use, Privacy policy).\n(Кнопки  Privacy policy и Terms of use должны вести на экраны с текстом)\n(Кнопка “Rate this app” должна открывать App Store с ссылкой на приложение, а не request review.)<\/usertask>",
      "role" : "user",
      "timestamp" : 767610297.546261
    },
    {
      "fileChanges" : [
        {
          "changes" : {
            "addedLines" : 8,
            "removedLines" : 0
          },
          "id" : "F92CE080-2A8A-4195-AF44-6F6D02B0520D",
          "path" : "ContentView.swift",
          "type" : "modified"
        },
        {
          "changes" : {
            "addedLines" : 47,
            "removedLines" : 0
          },
          "id" : "1C8D26D1-625D-4B5E-AE66-21184893EE54",
          "path" : "PrivacyView.swift",
          "type" : "added"
        },
        {
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 47
          },
          "id" : "7101EA52-A874-4CF6-9F34-786373005CDF",
          "path" : "TermsView.swift",
          "type" : "added"
        },
        {
          "changes" : {
            "addedLines" : 75,
            "removedLines" : 0
          },
          "id" : "2A52CF3E-920C-4819-BD45-F2B9B39053C4",
          "path" : "SettingsView.swift",
          "type" : "added"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "770BC30A-AA8C-462E-92E0-4502476EDB3A",
      "content" : "<write_to_file>\n<path>Views\/SettingsView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct SettingsView: View {\n4|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n5|    @Environment(\\.openURL) private var openURL\n6|    @State private var showingTerms = false\n7|    @State private var showingPrivacy = false\n8|    \n9|    private let appStoreId = \"YOUR_APP_STORE_ID\" \/\/ Replace with your actual App Store ID\n10|    \n11|    var body: some View {\n12|        List {\n13|            Section {\n14|                Toggle(isOn: $isDarkMode) {\n15|                    Label(\"Dark Mode\", systemImage: \"moon.fill\")\n16|                }\n17|            }\n18|            \n19|            Section {\n20|                Button {\n21|                    shareApp()\n22|                } label: {\n23|                    Label(\"Share App\", systemImage: \"square.and.arrow.up\")\n24|                }\n25|                \n26|                Button {\n27|                    rateApp()\n28|                } label: {\n29|                    Label(\"Rate This App\", systemImage: \"star.fill\")\n30|                }\n31|            }\n32|            \n33|            Section {\n34|                Button {\n35|                    showingTerms = true\n36|                } label: {\n37|                    Label(\"Terms of Use\", systemImage: \"doc.text\")\n38|                }\n39|                \n40|                Button {\n41|                    showingPrivacy = true\n42|                } label: {\n43|                    Label(\"Privacy Policy\", systemImage: \"hand.raised.fill\")\n44|                }\n45|            }\n46|        }\n47|        .navigationTitle(\"Settings\")\n48|        .sheet(isPresented: $showingTerms) {\n49|            TermsView()\n50|        }\n51|        .sheet(isPresented: $showingPrivacy) {\n52|            PrivacyView()\n53|        }\n54|    }\n55|    \n56|    private func shareApp() {\n57|        let appUrl = URL(string: \"https:\/\/apps.apple.com\/app\/id\\(appStoreId)\")!\n58|        let activityVC = UIActivityViewController(\n59|            activityItems: [\"Check out Bizpark!\", appUrl],\n60|            applicationActivities: nil\n61|        )\n62|        \n63|        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,\n64|           let window = windowScene.windows.first,\n65|           let rootVC = window.rootViewController {\n66|            activityVC.popoverPresentationController?.sourceView = rootVC.view\n67|            rootVC.present(activityVC, animated: true)\n68|        }\n69|    }\n70|    \n71|    private func rateApp() {\n72|        let appStoreURL = URL(string: \"https:\/\/apps.apple.com\/app\/id\\(appStoreId)?action=write-review\")!\n73|        openURL(appStoreURL)\n74|    }\n75|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/TermsView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct TermsView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    \n6|    var body: some View {\n7|        NavigationView {\n8|            ScrollView {\n9|                VStack(alignment: .leading, spacing: 20) {\n10|                    Group {\n11|                        Text(\"Terms of Use\")\n12|                            .font(.title)\n13|                            .fontWeight(.bold)\n14|                        \n15|                        Text(\"Last Updated: \\(Date().formatted(date: .long, time: .omitted))\")\n16|                            .foregroundColor(.secondary)\n17|                        \n18|                        Text(\"1. Acceptance of Terms\")\n19|                            .font(.headline)\n20|                        Text(\"By accessing and using Bizpark, you accept and agree to be bound by the terms and provision of this agreement.\")\n21|                        \n22|                        Text(\"2. Use License\")\n23|                            .font(.headline)\n24|                        Text(\"This is a personal, non-exclusive, non-transferable license to use Bizpark for storing and managing your business ideas.\")\n25|                        \n26|                        Text(\"3. Disclaimer\")\n27|                            .font(.headline)\n28|                        Text(\"The app is provided 'as is' without warranties of any kind, either expressed or implied.\")\n29|                        \n30|                        Text(\"4. Limitations\")\n31|                            .font(.headline)\n32|                        Text(\"You may not: (a) modify or copy the materials; (b) use the materials for any commercial purpose; (c) attempt to decompile or reverse engineer any software contained in Bizpark.\")\n33|                    }\n34|                }\n35|                .padding()\n36|            }\n37|            .navigationBarTitleDisplayMode(.inline)\n38|            .toolbar {\n39|                ToolbarItem(placement: .navigationBarTrailing) {\n40|                    Button(\"Done\") {\n41|                        dismiss()\n42|                    }\n43|                }\n44|            }\n45|        }\n46|    }\n47|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/PrivacyView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct PrivacyView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    \n6|    var body: some View {\n7|        NavigationView {\n8|            ScrollView {\n9|                VStack(alignment: .leading, spacing: 20) {\n10|                    Group {\n11|                        Text(\"Privacy Policy\")\n12|                            .font(.title)\n13|                            .fontWeight(.bold)\n14|                        \n15|                        Text(\"Last Updated: \\(Date().formatted(date: .long, time: .omitted))\")\n16|                            .foregroundColor(.secondary)\n17|                        \n18|                        Text(\"Data Collection\")\n19|                            .font(.headline)\n20|                        Text(\"Bizpark does not collect any personal information. All business ideas are stored locally on your device.\")\n21|                        \n22|                        Text(\"Data Storage\")\n23|                            .font(.headline)\n24|                        Text(\"Your business ideas are stored securely on your device and are not transmitted to any external servers.\")\n25|                        \n26|                        Text(\"Third-Party Services\")\n27|                            .font(.headline)\n28|                        Text(\"We do not share any information with third-party services or analytics providers.\")\n29|                        \n30|                        Text(\"Changes to Privacy Policy\")\n31|                            .font(.headline)\n32|                        Text(\"We reserve the right to update our Privacy Policy. Any changes will be reflected on this page.\")\n33|                    }\n34|                }\n35|                .padding()\n36|            }\n37|            .navigationBarTitleDisplayMode(.inline)\n38|            .toolbar {\n39|                ToolbarItem(placement: .navigationBarTrailing) {\n40|                    Button(\"Done\") {\n41|                        dismiss()\n42|                    }\n43|                }\n44|            }\n45|        }\n46|    }\n47|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|    \n8|    var body: some View {\n9|        NavigationView {\n10|            ZStack {\n11|                LinearGradient(\n12|                    gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n13|                    startPoint: .topLeading,\n14|                    endPoint: .bottomTrailing\n15|                )\n16|                .ignoresSafeArea()\n17|                \n18|                ScrollView {\n19|                    if viewModel.ideas.isEmpty {\n20|                        VStack(spacing: 20) {\n21|                            Image(systemName: \"lightbulb\")\n22|                                .font(.system(size: 60))\n23|                                .foregroundColor(.yellow)\n24|                            \n25|                            Text(\"No Business Ideas Yet\")\n26|                                .font(.title2)\n27|                                .fontWeight(.bold)\n28|                            \n29|                            Text(\"Tap the + button to add your first business idea!\")\n30|                                .foregroundColor(.secondary)\n31|                                .multilineTextAlignment(.center)\n32|                                .padding(.horizontal)\n33|                        }\n34|                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n35|                        .padding(.top, 100)\n36|                    } else {\n37|                        LazyVStack(spacing: 0) {\n38|                            ForEach(viewModel.ideas) { idea in\n39|                                IdeaCardView(idea: idea)\n40|                                    .transition(.opacity)\n41|                            }\n42|                            .onDelete(perform: viewModel.deleteIdea)\n43|                        }\n44|                        .padding(.vertical)\n45|                    }\n46|                }\n47|            }\n48|            .navigationTitle(\"Bizpark\")\n49|            .toolbar {\n50|                ToolbarItem(placement: .navigationBarLeading) {\n51|                    NavigationLink(destination: SettingsView()) {\n52|                        Image(systemName: \"gearshape.fill\")\n53|                    }\n54|                }\n55|                \n56|                ToolbarItem(placement: .navigationBarTrailing) {\n57|                    Button {\n58|                        showingAddIdea = true\n59|                    } label: {\n60|                        Image(systemName: \"plus.circle.fill\")\n61|                            .font(.title2)\n62|                    }\n63|                }\n64|            }\n65|            .sheet(isPresented: $showingAddIdea) {\n66|                AddIdeaView(viewModel: viewModel)\n67|            }\n68|        }\n69|        .preferredColorScheme(isDarkMode ? .dark : .light)\n70|    }\n71|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767610350.36978
    },
    {
      "id" : "0395B027-6AC1-48E2-9D81-96F7EE793632",
      "content" : "<usertask>После добавления новой карточки поля ввода очищаются, и пользователь возвращается на первую вкладку таббара.\nПоявляется уведомление об успешном добавлении.\nDetail View должен быть кастомным, с кнопками редактировать, удалить, поделиться.\nДизайн должен быть юзерфрендли, с яркими элементами.\nдобавь в приложение возможность переключения на темную тему\nсдеалай возможность вносить не целые числа\nкарточки должны сохраняться при перезапуске приложения<\/usertask>",
      "role" : "user",
      "timestamp" : 767610528.269229
    },
    {
      "fileChanges" : [
        {
          "path" : "IdeaDetailView.swift",
          "id" : "9D4A6F76-0182-4B92-A533-DCC3DCDE508B",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 123
          },
          "type" : "added"
        },
        {
          "path" : "BusinessIdea.swift",
          "id" : "A7C12CBF-DDF1-4B55-AA1B-8ACE90C6AFAE",
          "changes" : {
            "addedLines" : 2,
            "removedLines" : 0
          },
          "type" : "modified"
        },
        {
          "path" : "AddIdeaView.swift",
          "id" : "CFA83612-967F-413D-89D8-0330338C4303",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 32
          },
          "type" : "modified"
        },
        {
          "path" : "IdeaCardView.swift",
          "id" : "3C776FE2-65FA-49CE-B318-54D40CE651D4",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 8
          },
          "type" : "modified"
        },
        {
          "path" : "BusinessIdeasViewModel.swift",
          "id" : "B24FB8C3-FFCA-45F9-9765-684451054A36",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 25
          },
          "type" : "modified"
        },
        {
          "path" : "ContentView.swift",
          "id" : "C5575839-81F4-40A7-BEE7-AF8C27DD4D8B",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 19
          },
          "type" : "modified"
        },
        {
          "path" : "EditIdeaView.swift",
          "id" : "7E7E9BA2-D8E4-41B7-B93E-081E7A1B5B97",
          "changes" : {
            "addedLines" : 87,
            "removedLines" : 0
          },
          "type" : "added"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "229DD6F5-ACA3-4563-A2DE-36BCB69599A8",
      "content" : "<write_to_file>\n<path>Models\/BusinessIdea.swift<\/path>\n<content>\n1|import Foundation\n2|\n3|struct BusinessIdea: Identifiable, Codable, Equatable {\n4|    let id: UUID\n5|    var title: String\n6|    var description: String\n7|    var createdAt: Date\n8|    var budget: Double?\n9|    \n10|    init(id: UUID = UUID(), title: String, description: String, budget: Double? = nil, createdAt: Date = Date()) {\n11|        self.id = id\n12|        self.title = title\n13|        self.description = description\n14|        self.budget = budget\n15|        self.createdAt = createdAt\n16|    }\n17|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/IdeaDetailView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct IdeaDetailView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    let idea: BusinessIdea\n7|    \n8|    @State private var showingEditSheet = false\n9|    @State private var showingDeleteAlert = false\n10|    \n11|    var body: some View {\n12|        ScrollView {\n13|            VStack(alignment: .leading, spacing: 24) {\n14|                VStack(alignment: .leading, spacing: 12) {\n15|                    Text(idea.title)\n16|                        .font(.title)\n17|                        .fontWeight(.bold)\n18|                    \n19|                    Text(idea.createdAt.formatted(date: .long, time: .shortened))\n20|                        .font(.subheadline)\n21|                        .foregroundColor(.secondary)\n22|                }\n23|                .frame(maxWidth: .infinity, alignment: .leading)\n24|                .padding()\n25|                .background(\n26|                    RoundedRectangle(cornerRadius: 16)\n27|                        .fill(Color.accentColor.opacity(0.1))\n28|                )\n29|                \n30|                VStack(alignment: .leading, spacing: 8) {\n31|                    Text(\"Description\")\n32|                        .font(.headline)\n33|                    \n34|                    Text(idea.description)\n35|                        .lineSpacing(4)\n36|                }\n37|                \n38|                if let budget = idea.budget {\n39|                    VStack(alignment: .leading, spacing: 8) {\n40|                        Text(\"Estimated Budget\")\n41|                            .font(.headline)\n42|                        \n43|                        Text(String(format: \"$%.2f\", budget))\n44|                            .font(.title2)\n45|                            .foregroundColor(.green)\n46|                    }\n47|                }\n48|                \n49|                HStack(spacing: 16) {\n50|                    Button(action: {\n51|                        showingEditSheet = true\n52|                    }) {\n53|                        Label(\"Edit\", systemImage: \"pencil\")\n54|                            .frame(maxWidth: .infinity)\n55|                    }\n56|                    .buttonStyle(.bordered)\n57|                    .tint(.blue)\n58|                    \n59|                    Button(action: {\n60|                        shareIdea()\n61|                    }) {\n62|                        Label(\"Share\", systemImage: \"square.and.arrow.up\")\n63|                            .frame(maxWidth: .infinity)\n64|                    }\n65|                    .buttonStyle(.bordered)\n66|                    .tint(.green)\n67|                }\n68|                \n69|                Button(action: {\n70|                    showingDeleteAlert = true\n71|                }) {\n72|                    Label(\"Delete Idea\", systemImage: \"trash\")\n73|                        .frame(maxWidth: .infinity)\n74|                }\n75|                .buttonStyle(.bordered)\n76|                .tint(.red)\n77|            }\n78|            .padding()\n79|        }\n80|        .navigationBarTitleDisplayMode(.inline)\n81|        .sheet(isPresented: $showingEditSheet) {\n82|            EditIdeaView(viewModel: viewModel, idea: idea)\n83|        }\n84|        .alert(\"Delete Idea\", isPresented: $showingDeleteAlert) {\n85|            Button(\"Delete\", role: .destructive) {\n86|                deleteIdea()\n87|            }\n88|            Button(\"Cancel\", role: .cancel) { }\n89|        } message: {\n90|            Text(\"Are you sure you want to delete this idea? This action cannot be undone.\")\n91|        }\n92|    }\n93|    \n94|    private func shareIdea() {\n95|        let shareText = \"\"\"\n96|        Business Idea: \\(idea.title)\n97|        \n98|        Description:\n99|        \\(idea.description)\n100|        \n101|        \\(idea.budget.map { String(format: \"Estimated Budget: $%.2f\", $0) } ?? \"\")\n102|        \n103|        Shared from Bizpark\n104|        \"\"\"\n105|        \n106|        let av = UIActivityViewController(\n107|            activityItems: [shareText],\n108|            applicationActivities: nil\n109|        )\n110|        \n111|        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,\n112|           let window = windowScene.windows.first,\n113|           let rootVC = window.rootViewController {\n114|            av.popoverPresentationController?.sourceView = rootVC.view\n115|            rootVC.present(av, animated: true)\n116|        }\n117|    }\n118|    \n119|    private func deleteIdea() {\n120|        viewModel.deleteIdea(withId: idea.id)\n121|        dismiss()\n122|    }\n123|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/EditIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct EditIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    let idea: BusinessIdea\n7|    \n8|    @State private var title: String\n9|    @State private var description: String\n10|    @State private var budget: String\n11|    @FocusState private var focusedField: Field?\n12|    \n13|    enum Field {\n14|        case title, description, budget\n15|    }\n16|    \n17|    init(viewModel: BusinessIdeasViewModel, idea: BusinessIdea) {\n18|        self.viewModel = viewModel\n19|        self.idea = idea\n20|        _title = State(initialValue: idea.title)\n21|        _description = State(initialValue: idea.description)\n22|        _budget = State(initialValue: idea.budget.map { String(format: \"%.2f\", $0) } ?? \"\")\n23|    }\n24|    \n25|    var body: some View {\n26|        NavigationView {\n27|            Form {\n28|                Section {\n29|                    TextField(\"Title\", text: $title)\n30|                        .focused($focusedField, equals: .title)\n31|                        .font(.headline)\n32|                        .submitLabel(.next)\n33|                    \n34|                    TextEditor(text: $description)\n35|                        .focused($focusedField, equals: .description)\n36|                        .frame(height: 150)\n37|                    \n38|                    TextField(\"Budget (Optional)\", text: $budget)\n39|                        .focused($focusedField, equals: .budget)\n40|                        .keyboardType(.decimalPad)\n41|                        .submitLabel(.done)\n42|                }\n43|            }\n44|            .navigationTitle(\"Edit Idea\")\n45|            .navigationBarTitleDisplayMode(.inline)\n46|            .toolbar {\n47|                ToolbarItem(placement: .navigationBarLeading) {\n48|                    Button(\"Cancel\") {\n49|                        dismiss()\n50|                    }\n51|                }\n52|                \n53|                ToolbarItem(placement: .navigationBarTrailing) {\n54|                    Button(\"Save\") {\n55|                        saveIdea()\n56|                    }\n57|                    .disabled(title.isEmpty || description.isEmpty)\n58|                }\n59|                \n60|                ToolbarItemGroup(placement: .keyboard) {\n61|                    Spacer()\n62|                    Button(focusedField == .budget ? \"Done\" : \"Next\") {\n63|                        switch focusedField {\n64|                        case .title:\n65|                            focusedField = .description\n66|                        case .description:\n67|                            focusedField = .budget\n68|                        default:\n69|                            focusedField = nil\n70|                        }\n71|                    }\n72|                }\n73|            }\n74|        }\n75|    }\n76|    \n77|    private func saveIdea() {\n78|        let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n79|        viewModel.updateIdea(\n80|            id: idea.id,\n81|            title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n82|            description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n83|            budget: budgetValue\n84|        )\n85|        dismiss()\n86|    }\n87|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/AddIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct AddIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    \n7|    @State private var title = \"\"\n8|    @State private var description = \"\"\n9|    @State private var budget = \"\"\n10|    @FocusState private var focusedField: Field?\n11|    \n12|    enum Field {\n13|        case title, description, budget\n14|    }\n15|    \n16|    var body: some View {\n17|        NavigationView {\n18|            Form {\n19|                Section {\n20|                    TextField(\"Idea Title\", text: $title)\n21|                        .focused($focusedField, equals: .title)\n22|                        .font(.headline)\n23|                        .submitLabel(.next)\n24|                    \n25|                    TextEditor(text: $description)\n26|                        .focused($focusedField, equals: .description)\n27|                        .frame(height: 150)\n28|                        .font(.body)\n29|                    \n30|                    TextField(\"Estimated Budget (Optional)\", text: $budget)\n31|                        .focused($focusedField, equals: .budget)\n32|                        .keyboardType(.decimalPad)\n33|                        .submitLabel(.done)\n34|                }\n35|            }\n36|            .scrollDismissesKeyboard(.immediately)\n37|            .navigationTitle(\"New Business Idea\")\n38|            .navigationBarTitleDisplayMode(.inline)\n39|            .toolbar {\n40|                ToolbarItem(placement: .navigationBarLeading) {\n41|                    Button(\"Cancel\") {\n42|                        dismiss()\n43|                    }\n44|                }\n45|                \n46|                ToolbarItem(placement: .navigationBarTrailing) {\n47|                    Button(\"Save\") {\n48|                        saveIdea()\n49|                    }\n50|                    .disabled(title.isEmpty || description.isEmpty)\n51|                }\n52|                \n53|                ToolbarItemGroup(placement: .keyboard) {\n54|                    Spacer()\n55|                    Button(nextButtonTitle) {\n56|                        handleNextButton()\n57|                    }\n58|                }\n59|            }\n60|        }\n61|    }\n62|    \n63|    private var nextButtonTitle: String {\n64|        switch focusedField {\n65|        case .title:\n66|            return \"Next\"\n67|        case .description:\n68|            return \"Next\"\n69|        case .budget:\n70|            return \"Done\"\n71|        case .none:\n72|            return \"Done\"\n73|        }\n74|    }\n75|    \n76|    private func handleNextButton() {\n77|        switch focusedField {\n78|        case .title:\n79|            focusedField = .description\n80|        case .description:\n81|            focusedField = .budget\n82|        case .budget:\n83|            focusedField = nil\n84|        case .none:\n85|            break\n86|        }\n87|    }\n88|    \n89|    private func saveIdea() {\n90|        let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n91|        viewModel.addIdea(\n92|            title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n93|            description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n94|            budget: budgetValue\n95|        )\n96|        dismiss()\n97|    }\n98|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>ViewModels\/BusinessIdeasViewModel.swift<\/path>\n<content>\n1|import Foundation\n2|import SwiftUI\n3|\n4|class BusinessIdeasViewModel: ObservableObject {\n5|    @Published var ideas: [BusinessIdea] = []\n6|    @Published var showSuccessNotification = false\n7|    private let saveKey = \"SavedBusinessIdeas\"\n8|    \n9|    init() {\n10|        loadIdeas()\n11|    }\n12|    \n13|    func addIdea(title: String, description: String, budget: Double? = nil) {\n14|        let idea = BusinessIdea(title: title, description: description, budget: budget)\n15|        ideas.insert(idea, at: 0)\n16|        saveIdeas()\n17|        showSuccessNotification = true\n18|        \n19|        \/\/ Hide notification after 2 seconds\n20|        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n21|            self.showSuccessNotification = false\n22|        }\n23|    }\n24|    \n25|    func updateIdea(id: UUID, title: String, description: String, budget: Double?) {\n26|        if let index = ideas.firstIndex(where: { $0.id == id }) {\n27|            ideas[index] = BusinessIdea(\n28|                id: id,\n29|                title: title,\n30|                description: description,\n31|                budget: budget,\n32|                createdAt: ideas[index].createdAt\n33|            )\n34|            saveIdeas()\n35|        }\n36|    }\n37|    \n38|    func deleteIdea(at offsets: IndexSet) {\n39|        ideas.remove(atOffsets: offsets)\n40|        saveIdeas()\n41|    }\n42|    \n43|    func deleteIdea(withId id: UUID) {\n44|        ideas.removeAll { $0.id == id }\n45|        saveIdeas()\n46|    }\n47|    \n48|    private func saveIdeas() {\n49|        if let encoded = try? JSONEncoder().encode(ideas) {\n50|            UserDefaults.standard.set(encoded, forKey: saveKey)\n51|        }\n52|    }\n53|    \n54|    private func loadIdeas() {\n55|        if let data = UserDefaults.standard.data(forKey: saveKey),\n56|           let decoded = try? JSONDecoder().decode([BusinessIdea].self, from: data) {\n57|            ideas = decoded\n58|        }\n59|    }\n60|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|    \n8|    var body: some View {\n9|        NavigationView {\n10|            ZStack {\n11|                LinearGradient(\n12|                    gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n13|                    startPoint: .topLeading,\n14|                    endPoint: .bottomTrailing\n15|                )\n16|                .ignoresSafeArea()\n17|                \n18|                ScrollView {\n19|                    if viewModel.ideas.isEmpty {\n20|                        VStack(spacing: 20) {\n21|                            Image(systemName: \"lightbulb\")\n22|                                .font(.system(size: 60))\n23|                                .foregroundColor(.yellow)\n24|                                .symbolEffect(.bounce)\n25|                            \n26|                            Text(\"No Business Ideas Yet\")\n27|                                .font(.title2)\n28|                                .fontWeight(.bold)\n29|                            \n30|                            Text(\"Tap the + button to add your first business idea!\")\n31|                                .foregroundColor(.secondary)\n32|                                .multilineTextAlignment(.center)\n33|                                .padding(.horizontal)\n34|                        }\n35|                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n36|                        .padding(.top, 100)\n37|                    } else {\n38|                        LazyVStack(spacing: 0) {\n39|                            ForEach(viewModel.ideas) { idea in\n40|                                NavigationLink(destination: IdeaDetailView(viewModel: viewModel, idea: idea)) {\n41|                                    IdeaCardView(idea: idea)\n42|                                }\n43|                            }\n44|                        }\n45|                        .padding(.vertical)\n46|                    }\n47|                }\n48|                \n49|                if viewModel.showSuccessNotification {\n50|                    VStack {\n51|                        Spacer()\n52|                        HStack {\n53|                            Image(systemName: \"checkmark.circle.fill\")\n54|                                .foregroundColor(.green)\n55|                            Text(\"Idea successfully added!\")\n56|                                .foregroundColor(.white)\n57|                        }\n58|                        .padding()\n59|                        .background(Color.black.opacity(0.8))\n60|                        .cornerRadius(25)\n61|                        .padding(.bottom, 20)\n62|                    }\n63|                    .transition(.move(edge: .bottom))\n64|                    .animation(.spring(), value: viewModel.showSuccessNotification)\n65|                }\n66|            }\n67|            .navigationTitle(\"Bizpark\")\n68|            .toolbar {\n69|                ToolbarItem(placement: .navigationBarLeading) {\n70|                    NavigationLink(destination: SettingsView()) {\n71|                        Image(systemName: \"gearshape.fill\")\n72|                    }\n73|                }\n74|                \n75|                ToolbarItem(placement: .navigationBarTrailing) {\n76|                    Button {\n77|                        showingAddIdea = true\n78|                    } label: {\n79|                        Image(systemName: \"plus.circle.fill\")\n80|                            .font(.title2)\n81|                    }\n82|                }\n83|            }\n84|            .sheet(isPresented: $showingAddIdea) {\n85|                AddIdeaView(viewModel: viewModel)\n86|            }\n87|        }\n88|        .preferredColorScheme(isDarkMode ? .dark : .light)\n89|    }\n90|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/IdeaCardView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct IdeaCardView: View {\n4|    let idea: BusinessIdea\n5|    \n6|    var body: some View {\n7|        VStack(alignment: .leading, spacing: 12) {\n8|            Text(idea.title)\n9|                .font(.title2)\n10|                .fontWeight(.bold)\n11|                .foregroundColor(.primary)\n12|            \n13|            Text(idea.description)\n14|                .font(.body)\n15|                .foregroundColor(.secondary)\n16|                .lineLimit(3)\n17|            \n18|            HStack {\n19|                Image(systemName: \"clock\")\n20|                    .foregroundColor(.secondary)\n21|                Text(idea.createdAt.formatted(date: .abbreviated, time: .shortened))\n22|                    .font(.caption)\n23|                    .foregroundColor(.secondary)\n24|                \n25|                Spacer()\n26|                \n27|                if let budget = idea.budget {\n28|                    Text(String(format: \"$%.2f\", budget))\n29|                        .font(.callout)\n30|                        .fontWeight(.semibold)\n31|                        .foregroundColor(.green)\n32|                }\n33|            }\n34|        }\n35|        .padding()\n36|        .background(\n37|            RoundedRectangle(cornerRadius: 16)\n38|                .fill(Color(.systemBackground))\n39|                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)\n40|        )\n41|        .padding(.horizontal)\n42|        .padding(.vertical, 4)\n43|    }\n44|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767610592.798662
    },
    {
      "id" : "5F1F8DAF-6557-4E95-AB89-F7989B4C770F",
      "content" : "<usertask>\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/ContentView.swift:24:34 'symbolEffect(_:options:isActive:)' is only available in iOS 17.0 or newer\n\n\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/ContentView.swift:24:48 'bounce' is only available in iOS 17.0 or newer<\/usertask>",
      "role" : "user",
      "timestamp" : 767610606.621573
    },
    {
      "fileChanges" : [
        {
          "id" : "6E7CD1AF-9807-4D47-BDC2-D060E75243C2",
          "path" : "ContentView.swift",
          "type" : "modified",
          "changes" : {
            "addedLines" : 9,
            "removedLines" : 0
          }
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "2832D4EA-0993-447B-8760-69FD332CE79A",
      "content" : "<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|    @State private var isAnimating = false\n8|    \n9|    var body: some View {\n10|        NavigationView {\n11|            ZStack {\n12|                LinearGradient(\n13|                    gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n14|                    startPoint: .topLeading,\n15|                    endPoint: .bottomTrailing\n16|                )\n17|                .ignoresSafeArea()\n18|                \n19|                ScrollView {\n20|                    if viewModel.ideas.isEmpty {\n21|                        VStack(spacing: 20) {\n22|                            Image(systemName: \"lightbulb\")\n23|                                .font(.system(size: 60))\n24|                                .foregroundColor(.yellow)\n25|                                .scaleEffect(isAnimating ? 1.1 : 1.0)\n26|                                .animation(\n27|                                    Animation.easeInOut(duration: 1.0)\n28|                                        .repeatForever(autoreverses: true),\n29|                                    value: isAnimating\n30|                                )\n31|                                .onAppear {\n32|                                    isAnimating = true\n33|                                }\n34|                            \n35|                            Text(\"No Business Ideas Yet\")\n36|                                .font(.title2)\n37|                                .fontWeight(.bold)\n38|                            \n39|                            Text(\"Tap the + button to add your first business idea!\")\n40|                                .foregroundColor(.secondary)\n41|                                .multilineTextAlignment(.center)\n42|                                .padding(.horizontal)\n43|                        }\n44|                        .frame(maxWidth: .infinity, maxHeight: .infinity)\n45|                        .padding(.top, 100)\n46|                    } else {\n47|                        LazyVStack(spacing: 0) {\n48|                            ForEach(viewModel.ideas) { idea in\n49|                                NavigationLink(destination: IdeaDetailView(viewModel: viewModel, idea: idea)) {\n50|                                    IdeaCardView(idea: idea)\n51|                                }\n52|                            }\n53|                        }\n54|                        .padding(.vertical)\n55|                    }\n56|                }\n57|                \n58|                if viewModel.showSuccessNotification {\n59|                    VStack {\n60|                        Spacer()\n61|                        HStack {\n62|                            Image(systemName: \"checkmark.circle.fill\")\n63|                                .foregroundColor(.green)\n64|                            Text(\"Idea successfully added!\")\n65|                                .foregroundColor(.white)\n66|                        }\n67|                        .padding()\n68|                        .background(Color.black.opacity(0.8))\n69|                        .cornerRadius(25)\n70|                        .padding(.bottom, 20)\n71|                    }\n72|                    .transition(.move(edge: .bottom))\n73|                    .animation(.spring(), value: viewModel.showSuccessNotification)\n74|                }\n75|            }\n76|            .navigationTitle(\"Bizpark\")\n77|            .toolbar {\n78|                ToolbarItem(placement: .navigationBarLeading) {\n79|                    NavigationLink(destination: SettingsView()) {\n80|                        Image(systemName: \"gearshape.fill\")\n81|                    }\n82|                }\n83|                \n84|                ToolbarItem(placement: .navigationBarTrailing) {\n85|                    Button {\n86|                        showingAddIdea = true\n87|                    } label: {\n88|                        Image(systemName: \"plus.circle.fill\")\n89|                            .font(.title2)\n90|                    }\n91|                }\n92|            }\n93|            .sheet(isPresented: $showingAddIdea) {\n94|                AddIdeaView(viewModel: viewModel)\n95|            }\n96|        }\n97|        .preferredColorScheme(isDarkMode ? .dark : .light)\n98|    }\n99|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767610621.79734
    },
    {
      "id" : "B6FD6D54-5408-412D-A054-4AA1BDF9971B",
      "content" : "<usertask>Убери кнопки Next и Done в создании и редактировании заметки<\/usertask>",
      "role" : "user",
      "timestamp" : 767610695.78169
    },
    {
      "fileChanges" : [
        {
          "changes" : {
            "addedLines" : 0,
            "removedLines" : 24
          },
          "path" : "EditIdeaView.swift",
          "type" : "modified",
          "id" : "66DE64EE-77AB-4749-B954-A456B413FE7E"
        },
        {
          "changes" : {
            "removedLines" : 43,
            "addedLines" : 0
          },
          "id" : "91C78B21-3598-47A0-A753-7215558C2DEA",
          "path" : "AddIdeaView.swift",
          "type" : "modified"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "42067FE3-DF76-4CAB-BFF0-A1F606827DC9",
      "content" : "<write_to_file>\n<path>Views\/AddIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct AddIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    \n7|    @State private var title = \"\"\n8|    @State private var description = \"\"\n9|    @State private var budget = \"\"\n10|    \n11|    var body: some View {\n12|        NavigationView {\n13|            Form {\n14|                Section {\n15|                    TextField(\"Idea Title\", text: $title)\n16|                        .font(.headline)\n17|                    \n18|                    TextEditor(text: $description)\n19|                        .frame(height: 150)\n20|                        .font(.body)\n21|                    \n22|                    TextField(\"Estimated Budget (Optional)\", text: $budget)\n23|                        .keyboardType(.decimalPad)\n24|                }\n25|            }\n26|            .scrollDismissesKeyboard(.immediately)\n27|            .navigationTitle(\"New Business Idea\")\n28|            .navigationBarTitleDisplayMode(.inline)\n29|            .toolbar {\n30|                ToolbarItem(placement: .navigationBarLeading) {\n31|                    Button(\"Cancel\") {\n32|                        dismiss()\n33|                    }\n34|                }\n35|                \n36|                ToolbarItem(placement: .navigationBarTrailing) {\n37|                    Button(\"Save\") {\n38|                        saveIdea()\n39|                    }\n40|                    .disabled(title.isEmpty || description.isEmpty)\n41|                }\n42|            }\n43|        }\n44|    }\n45|    \n46|    private func saveIdea() {\n47|        let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n48|        viewModel.addIdea(\n49|            title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n50|            description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n51|            budget: budgetValue\n52|        )\n53|        dismiss()\n54|    }\n55|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/EditIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct EditIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @ObservedObject var viewModel: BusinessIdeasViewModel\n6|    let idea: BusinessIdea\n7|    \n8|    @State private var title: String\n9|    @State private var description: String\n10|    @State private var budget: String\n11|    \n12|    init(viewModel: BusinessIdeasViewModel, idea: BusinessIdea) {\n13|        self.viewModel = viewModel\n14|        self.idea = idea\n15|        _title = State(initialValue: idea.title)\n16|        _description = State(initialValue: idea.description)\n17|        _budget = State(initialValue: idea.budget.map { String(format: \"%.2f\", $0) } ?? \"\")\n18|    }\n19|    \n20|    var body: some View {\n21|        NavigationView {\n22|            Form {\n23|                Section {\n24|                    TextField(\"Title\", text: $title)\n25|                        .font(.headline)\n26|                    \n27|                    TextEditor(text: $description)\n28|                        .frame(height: 150)\n29|                    \n30|                    TextField(\"Budget (Optional)\", text: $budget)\n31|                        .keyboardType(.decimalPad)\n32|                }\n33|            }\n34|            .navigationTitle(\"Edit Idea\")\n35|            .navigationBarTitleDisplayMode(.inline)\n36|            .toolbar {\n37|                ToolbarItem(placement: .navigationBarLeading) {\n38|                    Button(\"Cancel\") {\n39|                        dismiss()\n40|                    }\n41|                }\n42|                \n43|                ToolbarItem(placement: .navigationBarTrailing) {\n44|                    Button(\"Save\") {\n45|                        saveIdea()\n46|                    }\n47|                    .disabled(title.isEmpty || description.isEmpty)\n48|                }\n49|            }\n50|        }\n51|    }\n52|    \n53|    private func saveIdea() {\n54|        let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n55|        viewModel.updateIdea(\n56|            id: idea.id,\n57|            title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n58|            description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n59|            budget: budgetValue\n60|        )\n61|        dismiss()\n62|    }\n63|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767610712.165745
    },
    {
      "id" : "4A1A3A24-C670-4B03-B2BE-0A79AC49853D",
      "content" : "<usertask>В темной теме плохо видно заметки, сделай дизайн более юзерфрендли<\/usertask>",
      "role" : "user",
      "timestamp" : 767610772.478905
    },
    {
      "fileChanges" : [
        {
          "path" : "IdeaCardView.swift",
          "type" : "modified",
          "id" : "DC3673C6-9408-447A-8BB7-842234037521",
          "changes" : {
            "addedLines" : 22,
            "removedLines" : 0
          }
        },
        {
          "path" : "EditIdeaView.swift",
          "type" : "modified",
          "id" : "F85A73DC-B088-4242-A1C6-10C4F16E849E",
          "changes" : {
            "addedLines" : 13,
            "removedLines" : 0
          }
        },
        {
          "path" : "IdeaDetailView.swift",
          "type" : "modified",
          "id" : "0F32D2D2-6918-43E0-967E-21A6C9E065FC",
          "changes" : {
            "addedLines" : 11,
            "removedLines" : 0
          }
        },
        {
          "path" : "AddIdeaView.swift",
          "type" : "modified",
          "id" : "D6F52125-DD14-43D9-A68E-EA655910BCDA",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 29
          }
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "ECA35E14-A175-43D7-9B58-21D1B62EA0A1",
      "content" : "<write_to_file>\n<path>Views\/IdeaCardView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct IdeaCardView: View {\n4|    let idea: BusinessIdea\n5|    @Environment(\\.colorScheme) private var colorScheme\n6|    \n7|    var body: some View {\n8|        VStack(alignment: .leading, spacing: 12) {\n9|            Text(idea.title)\n10|                .font(.title2)\n11|                .fontWeight(.bold)\n12|                .foregroundColor(colorScheme == .dark ? .white : .primary)\n13|            \n14|            Text(idea.description)\n15|                .font(.body)\n16|                .foregroundColor(colorScheme == .dark ? .white.opacity(0.8) : .secondary)\n17|                .lineLimit(3)\n18|            \n19|            HStack {\n20|                Image(systemName: \"clock\")\n21|                    .foregroundColor(colorScheme == .dark ? .white.opacity(0.6) : .secondary)\n22|                Text(idea.createdAt.formatted(date: .abbreviated, time: .shortened))\n23|                    .font(.caption)\n24|                    .foregroundColor(colorScheme == .dark ? .white.opacity(0.6) : .secondary)\n25|                \n26|                Spacer()\n27|                \n28|                if let budget = idea.budget {\n29|                    Text(String(format: \"$%.2f\", budget))\n30|                        .font(.callout)\n31|                        .fontWeight(.semibold)\n32|                        .foregroundColor(.green)\n33|                        .padding(.horizontal, 8)\n34|                        .padding(.vertical, 4)\n35|                        .background(\n36|                            RoundedRectangle(cornerRadius: 8)\n37|                                .fill(colorScheme == .dark ? Color.green.opacity(0.2) : Color.green.opacity(0.1))\n38|                        )\n39|                }\n40|            }\n41|        }\n42|        .padding()\n43|        .background(\n44|            RoundedRectangle(cornerRadius: 16)\n45|                .fill(colorScheme == .dark ? \n46|                    Color(UIColor.systemGray6) : Color(.systemBackground))\n47|                .shadow(\n48|                    color: colorScheme == .dark ? \n49|                        Color.white.opacity(0.05) : Color.black.opacity(0.1),\n50|                    radius: 10,\n51|                    x: 0,\n52|                    y: 5\n53|                )\n54|        )\n55|        .overlay(\n56|            RoundedRectangle(cornerRadius: 16)\n57|                .stroke(\n58|                    colorScheme == .dark ? \n59|                        Color.white.opacity(0.1) : Color.clear,\n60|                    lineWidth: 1\n61|                )\n62|        )\n63|        .padding(.horizontal)\n64|        .padding(.vertical, 4)\n65|    }\n66|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/AddIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct AddIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @Environment(\\.colorScheme) private var colorScheme\n6|    @ObservedObject var viewModel: BusinessIdeasViewModel\n7|    \n8|    @State private var title = \"\"\n9|    @State private var description = \"\"\n10|    @State private var budget = \"\"\n11|    \n12|    var body: some View {\n13|        NavigationView {\n14|            Form {\n15|                Section {\n16|                    TextField(\"Idea Title\", text: $title)\n17|                        .font(.headline)\n18|                        .textFieldStyle(CustomTextFieldStyle())\n19|                    \n20|                    TextEditor(text: $description)\n21|                        .frame(height: 150)\n22|                        .font(.body)\n23|                        .padding(8)\n24|                        .background(\n25|                            RoundedRectangle(cornerRadius: 8)\n26|                                .fill(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(.systemBackground))\n27|                        )\n28|                        .overlay(\n29|                            RoundedRectangle(cornerRadius: 8)\n30|                                .stroke(Color.gray.opacity(0.2), lineWidth: 1)\n31|                        )\n32|                    \n33|                    TextField(\"Estimated Budget (Optional)\", text: $budget)\n34|                        .keyboardType(.decimalPad)\n35|                        .textFieldStyle(CustomTextFieldStyle())\n36|                }\n37|            }\n38|            .scrollDismissesKeyboard(.immediately)\n39|            .navigationTitle(\"New Business Idea\")\n40|            .navigationBarTitleDisplayMode(.inline)\n41|            .toolbar {\n42|                ToolbarItem(placement: .navigationBarLeading) {\n43|                    Button(\"Cancel\") {\n44|                        dismiss()\n45|                    }\n46|                }\n47|                \n48|                ToolbarItem(placement: .navigationBarTrailing) {\n49|                    Button(\"Save\") {\n50|                        saveIdea()\n51|                    }\n52|                    .disabled(title.isEmpty || description.isEmpty)\n53|                }\n54|            }\n55|        }\n56|    }\n57|    \n58|    private func saveIdea() {\n59|        let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n60|        viewModel.addIdea(\n61|            title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n62|            description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n63|            budget: budgetValue\n64|        )\n65|        dismiss()\n66|    }\n67|}\n68|\n69|struct CustomTextFieldStyle: TextFieldStyle {\n70|    @Environment(\\.colorScheme) private var colorScheme\n71|    \n72|    func _body(configuration: TextField<Self._Label>) -> some View {\n73|        configuration\n74|            .padding(12)\n75|            .background(\n76|                RoundedRectangle(cornerRadius: 8)\n77|                    .fill(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(.systemBackground))\n78|            )\n79|            .overlay(\n80|                RoundedRectangle(cornerRadius: 8)\n81|                    .stroke(Color.gray.opacity(0.2), lineWidth: 1)\n82|            )\n83|    }\n84|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/EditIdeaView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct EditIdeaView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @Environment(\\.colorScheme) private var colorScheme\n6|    @ObservedObject var viewModel: BusinessIdeasViewModel\n7|    let idea: BusinessIdea\n8|    \n9|    @State private var title: String\n10|    @State private var description: String\n11|    @State private var budget: String\n12|    \n13|    init(viewModel: BusinessIdeasViewModel, idea: BusinessIdea) {\n14|        self.viewModel = viewModel\n15|        self.idea = idea\n16|        _title = State(initialValue: idea.title)\n17|        _description = State(initialValue: idea.description)\n18|        _budget = State(initialValue: idea.budget.map { String(format: \"%.2f\", $0) } ?? \"\")\n19|    }\n20|    \n21|    var body: some View {\n22|        NavigationView {\n23|            Form {\n24|                Section {\n25|                    TextField(\"Title\", text: $title)\n26|                        .font(.headline)\n27|                        .textFieldStyle(CustomTextFieldStyle())\n28|                    \n29|                    TextEditor(text: $description)\n30|                        .frame(height: 150)\n31|                        .font(.body)\n32|                        .padding(8)\n33|                        .background(\n34|                            RoundedRectangle(cornerRadius: 8)\n35|                                .fill(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(.systemBackground))\n36|                        )\n37|                        .overlay(\n38|                            RoundedRectangle(cornerRadius: 8)\n39|                                .stroke(Color.gray.opacity(0.2), lineWidth: 1)\n40|                        )\n41|                    \n42|                    TextField(\"Budget (Optional)\", text: $budget)\n43|                        .keyboardType(.decimalPad)\n44|                        .textFieldStyle(CustomTextFieldStyle())\n45|                }\n46|            }\n47|            .navigationTitle(\"Edit Idea\")\n48|            .navigationBarTitleDisplayMode(.inline)\n49|            .toolbar {\n50|                ToolbarItem(placement: .navigationBarLeading) {\n51|                    Button(\"Cancel\") {\n52|                        dismiss()\n53|                    }\n54|                }\n55|                \n56|                ToolbarItem(placement: .navigationBarTrailing) {\n57|                    Button(\"Save\") {\n58|                        saveIdea()\n59|                    }\n60|                    .disabled(title.isEmpty || description.isEmpty)\n61|                }\n62|            }\n63|        }\n64|    }\n65|    \n66|    private func saveIdea() {\n67|        let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n68|        viewModel.updateIdea(\n69|            id: idea.id,\n70|            title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n71|            description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n72|            budget: budgetValue\n73|        )\n74|        dismiss()\n75|    }\n76|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/IdeaDetailView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct IdeaDetailView: View {\n4|    @Environment(\\.dismiss) private var dismiss\n5|    @Environment(\\.colorScheme) private var colorScheme\n6|    @ObservedObject var viewModel: BusinessIdeasViewModel\n7|    let idea: BusinessIdea\n8|    \n9|    @State private var showingEditSheet = false\n10|    @State private var showingDeleteAlert = false\n11|    \n12|    var body: some View {\n13|        ScrollView {\n14|            VStack(alignment: .leading, spacing: 24) {\n15|                VStack(alignment: .leading, spacing: 12) {\n16|                    Text(idea.title)\n17|                        .font(.title)\n18|                        .fontWeight(.bold)\n19|                    \n20|                    Text(idea.createdAt.formatted(date: .long, time: .shortened))\n21|                        .font(.subheadline)\n22|                        .foregroundColor(colorScheme == .dark ? .white.opacity(0.6) : .secondary)\n23|                }\n24|                .frame(maxWidth: .infinity, alignment: .leading)\n25|                .padding()\n26|                .background(\n27|                    RoundedRectangle(cornerRadius: 16)\n28|                        .fill(colorScheme == .dark ? Color(UIColor.systemGray6) : Color.accentColor.opacity(0.1))\n29|                )\n30|                \n31|                VStack(alignment: .leading, spacing: 8) {\n32|                    Text(\"Description\")\n33|                        .font(.headline)\n34|                        .foregroundColor(colorScheme == .dark ? .white : .primary)\n35|                    \n36|                    Text(idea.description)\n37|                        .lineSpacing(4)\n38|                        .foregroundColor(colorScheme == .dark ? .white.opacity(0.8) : .primary)\n39|                }\n40|                \n41|                if let budget = idea.budget {\n42|                    VStack(alignment: .leading, spacing: 8) {\n43|                        Text(\"Estimated Budget\")\n44|                            .font(.headline)\n45|                            .foregroundColor(colorScheme == .dark ? .white : .primary)\n46|                        \n47|                        Text(String(format: \"$%.2f\", budget))\n48|                            .font(.title2)\n49|                            .fontWeight(.semibold)\n50|                            .foregroundColor(.green)\n51|                            .padding(.horizontal, 12)\n52|                            .padding(.vertical, 8)\n53|                            .background(\n54|                                RoundedRectangle(cornerRadius: 12)\n55|                                    .fill(colorScheme == .dark ? Color.green.opacity(0.2) : Color.green.opacity(0.1))\n56|                            )\n57|                    }\n58|                }\n59|                \n60|                HStack(spacing: 16) {\n61|                    Button(action: {\n62|                        showingEditSheet = true\n63|                    }) {\n64|                        Label(\"Edit\", systemImage: \"pencil\")\n65|                            .frame(maxWidth: .infinity)\n66|                    }\n67|                    .buttonStyle(.bordered)\n68|                    .tint(.blue)\n69|                    \n70|                    Button(action: {\n71|                        shareIdea()\n72|                    }) {\n73|                        Label(\"Share\", systemImage: \"square.and.arrow.up\")\n74|                            .frame(maxWidth: .infinity)\n75|                    }\n76|                    .buttonStyle(.bordered)\n77|                    .tint(.green)\n78|                }\n79|                \n80|                Button(action: {\n81|                    showingDeleteAlert = true\n82|                }) {\n83|                    Label(\"Delete Idea\", systemImage: \"trash\")\n84|                        .frame(maxWidth: .infinity)\n85|                }\n86|                .buttonStyle(.bordered)\n87|                .tint(.red)\n88|            }\n89|            .padding()\n90|        }\n91|        .navigationBarTitleDisplayMode(.inline)\n92|        .sheet(isPresented: $showingEditSheet) {\n93|            EditIdeaView(viewModel: viewModel, idea: idea)\n94|        }\n95|        .alert(\"Delete Idea\", isPresented: $showingDeleteAlert) {\n96|            Button(\"Delete\", role: .destructive) {\n97|                deleteIdea()\n98|            }\n99|            Button(\"Cancel\", role: .cancel) { }\n100|        } message: {\n101|            Text(\"Are you sure you want to delete this idea? This action cannot be undone.\")\n102|        }\n103|    }\n104|    \n105|    private func shareIdea() {\n106|        let shareText = \"\"\"\n107|        Business Idea: \\(idea.title)\n108|        \n109|        Description:\n110|        \\(idea.description)\n111|        \n112|        \\(idea.budget.map { String(format: \"Estimated Budget: $%.2f\", $0) } ?? \"\")\n113|        \n114|        Shared from Bizpark\n115|        \"\"\"\n116|        \n117|        let av = UIActivityViewController(\n118|            activityItems: [shareText],\n119|            applicationActivities: nil\n120|        )\n121|        \n122|        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,\n123|           let window = windowScene.windows.first,\n124|           let rootVC = window.rootViewController {\n125|            av.popoverPresentationController?.sourceView = rootVC.view\n126|            rootVC.present(av, animated: true)\n127|        }\n128|    }\n129|    \n130|    private func deleteIdea() {\n131|        viewModel.deleteIdea(withId: idea.id)\n132|        dismiss()\n133|    }\n134|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767610844.904285
    },
    {
      "id" : "3DFF93F1-9228-46AC-B081-76D2AFB22CF6",
      "content" : "<usertask>Добавить онбординг из 3 страниц с анимацией переходов и кнопками Next и Get Started.\nОнбординг отображается один раз, пока пользователь его полностью не пройдет.\nОнбординг должен содержать информацию только о тех функциях которые есть в приложении. \nна онбординге НЕ должно быть кнопки skip<\/usertask>",
      "role" : "user",
      "timestamp" : 767610944.067531
    },
    {
      "fileChanges" : [
        {
          "type" : "added",
          "path" : "OnboardingView.swift",
          "id" : "07C212C7-2258-482D-9658-15F125B182EB",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 117
          }
        },
        {
          "type" : "modified",
          "path" : "ContentView.swift",
          "id" : "D0C92A82-B81B-44C7-8D8D-75691B508958",
          "changes" : {
            "addedLines" : 7,
            "removedLines" : 0
          }
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "BF377385-076F-45ED-BBC1-6ECFAB1CEB6F",
      "content" : "<write_to_file>\n<path>Views\/OnboardingView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct OnboardingView: View {\n4|    @Binding var isOnboardingComplete: Bool\n5|    @State private var currentPage = 0\n6|    \n7|    let pages = [\n8|        OnboardingPage(\n9|            title: \"Capture Your Ideas\",\n10|            description: \"Save your business ideas instantly with titles and descriptions. Never lose a brilliant idea again!\",\n11|            imageName: \"lightbulb.fill\",\n12|            color: .yellow\n13|        ),\n14|        OnboardingPage(\n15|            title: \"Track Your Budget\",\n16|            description: \"Estimate and track potential budgets for your business ideas to keep your plans realistic and organized.\",\n17|            imageName: \"dollarsign.circle.fill\",\n18|            color: .green\n19|        ),\n20|        OnboardingPage(\n21|            title: \"Share & Collaborate\",\n22|            description: \"Share your ideas with partners and collaborators. Edit, update, and manage your ideas with ease.\",\n23|            imageName: \"square.and.arrow.up.fill\",\n24|            color: .blue\n25|        )\n26|    ]\n27|    \n28|    var body: some View {\n29|        ZStack {\n30|            Color(UIColor.systemBackground)\n31|                .ignoresSafeArea()\n32|            \n33|            TabView(selection: $currentPage) {\n34|                ForEach(0..<pages.count, id: \\.self) { index in\n35|                    VStack(spacing: 32) {\n36|                        Spacer()\n37|                        \n38|                        Image(systemName: pages[index].imageName)\n39|                            .font(.system(size: 100))\n40|                            .foregroundColor(pages[index].color)\n41|                            .symbolEffect(.bounce, options: .repeating)\n42|                        \n43|                        Text(pages[index].title)\n44|                            .font(.title)\n45|                            .fontWeight(.bold)\n46|                            .multilineTextAlignment(.center)\n47|                        \n48|                        Text(pages[index].description)\n49|                            .font(.body)\n50|                            .multilineTextAlignment(.center)\n51|                            .foregroundColor(.secondary)\n52|                            .padding(.horizontal, 32)\n53|                        \n54|                        Spacer()\n55|                        \n56|                        if index == pages.count - 1 {\n57|                            Button {\n58|                                completeOnboarding()\n59|                            } label: {\n60|                                Text(\"Get Started\")\n61|                                    .font(.headline)\n62|                                    .foregroundColor(.white)\n63|                                    .frame(maxWidth: .infinity)\n64|                                    .padding()\n65|                                    .background(Color.accentColor)\n66|                                    .cornerRadius(16)\n67|                            }\n68|                            .padding(.horizontal, 32)\n69|                        } else {\n70|                            Button {\n71|                                withAnimation {\n72|                                    currentPage += 1\n73|                                }\n74|                            } label: {\n75|                                Text(\"Next\")\n76|                                    .font(.headline)\n77|                                    .foregroundColor(.white)\n78|                                    .frame(maxWidth: .infinity)\n79|                                    .padding()\n80|                                    .background(Color.accentColor)\n81|                                    .cornerRadius(16)\n82|                            }\n83|                            .padding(.horizontal, 32)\n84|                        }\n85|                        \n86|                        \/\/ Page indicators\n87|                        HStack(spacing: 8) {\n88|                            ForEach(0..<pages.count, id: \\.self) { index in\n89|                                Circle()\n90|                                    .fill(currentPage == index ? Color.accentColor : Color.gray.opacity(0.3))\n91|                                    .frame(width: 8, height: 8)\n92|                                    .animation(.easeInOut, value: currentPage)\n93|                            }\n94|                        }\n95|                        .padding(.top, 16)\n96|                        .padding(.bottom, 32)\n97|                    }\n98|                    .tag(index)\n99|                }\n100|            }\n101|            .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never))\n102|        }\n103|    }\n104|    \n105|    private func completeOnboarding() {\n106|        withAnimation {\n107|            isOnboardingComplete = true\n108|        }\n109|    }\n110|}\n111|\n112|struct OnboardingPage {\n113|    let title: String\n114|    let description: String\n115|    let imageName: String\n116|    let color: Color\n117|}\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Views\/ContentView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct ContentView: View {\n4|    @StateObject private var viewModel = BusinessIdeasViewModel()\n5|    @State private var showingAddIdea = false\n6|    @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|    @State private var isAnimating = false\n8|    @AppStorage(\"isOnboardingComplete\") private var isOnboardingComplete = false\n9|    \n10|    var body: some View {\n11|        Group {\n12|            if !isOnboardingComplete {\n13|                OnboardingView(isOnboardingComplete: $isOnboardingComplete)\n14|            } else {\n15|                NavigationView {\n16|                    ZStack {\n17|                        LinearGradient(\n18|                            gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n19|                            startPoint: .topLeading,\n20|                            endPoint: .bottomTrailing\n21|                        )\n22|                        .ignoresSafeArea()\n23|                        \n24|                        ScrollView {\n25|                            if viewModel.ideas.isEmpty {\n26|                                VStack(spacing: 20) {\n27|                                    Image(systemName: \"lightbulb\")\n28|                                        .font(.system(size: 60))\n29|                                        .foregroundColor(.yellow)\n30|                                        .scaleEffect(isAnimating ? 1.1 : 1.0)\n31|                                        .animation(\n32|                                            Animation.easeInOut(duration: 1.0)\n33|                                                .repeatForever(autoreverses: true),\n34|                                            value: isAnimating\n35|                                        )\n36|                                        .onAppear {\n37|                                            isAnimating = true\n38|                                        }\n39|                                    \n40|                                    Text(\"No Business Ideas Yet\")\n41|                                        .font(.title2)\n42|                                        .fontWeight(.bold)\n43|                                    \n44|                                    Text(\"Tap the + button to add your first business idea!\")\n45|                                        .foregroundColor(.secondary)\n46|                                        .multilineTextAlignment(.center)\n47|                                        .padding(.horizontal)\n48|                                }\n49|                                .frame(maxWidth: .infinity, maxHeight: .infinity)\n50|                                .padding(.top, 100)\n51|                            } else {\n52|                                LazyVStack(spacing: 0) {\n53|                                    ForEach(viewModel.ideas) { idea in\n54|                                        NavigationLink(destination: IdeaDetailView(viewModel: viewModel, idea: idea)) {\n55|                                            IdeaCardView(idea: idea)\n56|                                        }\n57|                                    }\n58|                                }\n59|                                .padding(.vertical)\n60|                            }\n61|                        }\n62|                        \n63|                        if viewModel.showSuccessNotification {\n64|                            VStack {\n65|                                Spacer()\n66|                                HStack {\n67|                                    Image(systemName: \"checkmark.circle.fill\")\n68|                                        .foregroundColor(.green)\n69|                                    Text(\"Idea successfully added!\")\n70|                                        .foregroundColor(.white)\n71|                                }\n72|                                .padding()\n73|                                .background(Color.black.opacity(0.8))\n74|                                .cornerRadius(25)\n75|                                .padding(.bottom, 20)\n76|                            }\n77|                            .transition(.move(edge: .bottom))\n78|                            .animation(.spring(), value: viewModel.showSuccessNotification)\n79|                        }\n80|                    }\n81|                    .navigationTitle(\"Bizpark\")\n82|                    .toolbar {\n83|                        ToolbarItem(placement: .navigationBarLeading) {\n84|                            NavigationLink(destination: SettingsView()) {\n85|                                Image(systemName: \"gearshape.fill\")\n86|                            }\n87|                        }\n88|                        \n89|                        ToolbarItem(placement: .navigationBarTrailing) {\n90|                            Button {\n91|                                showingAddIdea = true\n92|                            } label: {\n93|                                Image(systemName: \"plus.circle.fill\")\n94|                                    .font(.title2)\n95|                            }\n96|                        }\n97|                    }\n98|                    .sheet(isPresented: $showingAddIdea) {\n99|                        AddIdeaView(viewModel: viewModel)\n100|                    }\n101|                }\n102|                .preferredColorScheme(isDarkMode ? .dark : .light)\n103|            }\n104|        }\n105|    }\n106|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767610982.104808
    },
    {
      "id" : "9DC05456-D41C-4AC3-A4B2-3BD96AD494FD",
      "content" : "<usertask>\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/Views\/OnboardingView.swift:41:30 'symbolEffect(_:options:isActive:)' is only available in iOS 17.0 or newer\n\n\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/Views\/OnboardingView.swift:41:44 'bounce' is only available in iOS 17.0 or newer\n\n\/Users\/kuzmakuzmin\/Documents\/gen proj\/Bizpark\/Bizpark\/Generated\/Views\/OnboardingView.swift:41:62 'repeating' is only available in iOS 17.0 or newer<\/usertask>",
      "role" : "user",
      "timestamp" : 767610996.093908
    },
    {
      "fileChanges" : [
        {
          "type" : "modified",
          "changes" : {
            "addedLines" : 9,
            "removedLines" : 0
          },
          "id" : "B4A716C1-9AED-421C-9176-1A079A17FFB2",
          "path" : "OnboardingView.swift"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "B1574B11-EE0C-4E28-AA69-DE817028EC67",
      "content" : "<write_to_file>\n<path>Views\/OnboardingView.swift<\/path>\n<content>\n1|import SwiftUI\n2|\n3|struct OnboardingView: View {\n4|    @Binding var isOnboardingComplete: Bool\n5|    @State private var currentPage = 0\n6|    @State private var isAnimating = false\n7|    \n8|    let pages = [\n9|        OnboardingPage(\n10|            title: \"Capture Your Ideas\",\n11|            description: \"Save your business ideas instantly with titles and descriptions. Never lose a brilliant idea again!\",\n12|            imageName: \"lightbulb.fill\",\n13|            color: .yellow\n14|        ),\n15|        OnboardingPage(\n16|            title: \"Track Your Budget\",\n17|            description: \"Estimate and track potential budgets for your business ideas to keep your plans realistic and organized.\",\n18|            imageName: \"dollarsign.circle.fill\",\n19|            color: .green\n20|        ),\n21|        OnboardingPage(\n22|            title: \"Share & Collaborate\",\n23|            description: \"Share your ideas with partners and collaborators. Edit, update, and manage your ideas with ease.\",\n24|            imageName: \"square.and.arrow.up.fill\",\n25|            color: .blue\n26|        )\n27|    ]\n28|    \n29|    var body: some View {\n30|        ZStack {\n31|            Color(UIColor.systemBackground)\n32|                .ignoresSafeArea()\n33|            \n34|            TabView(selection: $currentPage) {\n35|                ForEach(0..<pages.count, id: \\.self) { index in\n36|                    VStack(spacing: 32) {\n37|                        Spacer()\n38|                        \n39|                        Image(systemName: pages[index].imageName)\n40|                            .font(.system(size: 100))\n41|                            .foregroundColor(pages[index].color)\n42|                            .scaleEffect(isAnimating ? 1.1 : 1.0)\n43|                            .animation(\n44|                                Animation.easeInOut(duration: 1.0)\n45|                                    .repeatForever(autoreverses: true),\n46|                                value: isAnimating\n47|                            )\n48|                            .onAppear {\n49|                                isAnimating = true\n50|                            }\n51|                        \n52|                        Text(pages[index].title)\n53|                            .font(.title)\n54|                            .fontWeight(.bold)\n55|                            .multilineTextAlignment(.center)\n56|                        \n57|                        Text(pages[index].description)\n58|                            .font(.body)\n59|                            .multilineTextAlignment(.center)\n60|                            .foregroundColor(.secondary)\n61|                            .padding(.horizontal, 32)\n62|                        \n63|                        Spacer()\n64|                        \n65|                        if index == pages.count - 1 {\n66|                            Button {\n67|                                completeOnboarding()\n68|                            } label: {\n69|                                Text(\"Get Started\")\n70|                                    .font(.headline)\n71|                                    .foregroundColor(.white)\n72|                                    .frame(maxWidth: .infinity)\n73|                                    .padding()\n74|                                    .background(Color.accentColor)\n75|                                    .cornerRadius(16)\n76|                            }\n77|                            .padding(.horizontal, 32)\n78|                        } else {\n79|                            Button {\n80|                                withAnimation {\n81|                                    currentPage += 1\n82|                                }\n83|                            } label: {\n84|                                Text(\"Next\")\n85|                                    .font(.headline)\n86|                                    .foregroundColor(.white)\n87|                                    .frame(maxWidth: .infinity)\n88|                                    .padding()\n89|                                    .background(Color.accentColor)\n90|                                    .cornerRadius(16)\n91|                            }\n92|                            .padding(.horizontal, 32)\n93|                        }\n94|                        \n95|                        \/\/ Page indicators\n96|                        HStack(spacing: 8) {\n97|                            ForEach(0..<pages.count, id: \\.self) { index in\n98|                                Circle()\n99|                                    .fill(currentPage == index ? Color.accentColor : Color.gray.opacity(0.3))\n100|                                    .frame(width: 8, height: 8)\n101|                                    .animation(.easeInOut, value: currentPage)\n102|                            }\n103|                        }\n104|                        .padding(.top, 16)\n105|                        .padding(.bottom, 32)\n106|                    }\n107|                    .tag(index)\n108|                }\n109|            }\n110|            .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never))\n111|        }\n112|    }\n113|    \n114|    private func completeOnboarding() {\n115|        withAnimation {\n116|            isOnboardingComplete = true\n117|        }\n118|    }\n119|}\n120|\n121|struct OnboardingPage {\n122|    let title: String\n123|    let description: String\n124|    let imageName: String\n125|    let color: Color\n126|}\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767611016.923663
    },
    {
      "id" : "1B345094-7D45-4474-B632-02EB0CDA791D",
      "content" : "<usertask>Сделай главный экран вкладкой Notes а настройки перенеси в вкладку  Settings<\/usertask>",
      "role" : "user",
      "timestamp" : 767611225.570595
    },
    {
      "fileChanges" : [
        {
          "id" : "C2F2B575-4376-48CE-A649-11BADDAD56B0",
          "type" : "modified",
          "changes" : {
            "addedLines" : 14,
            "removedLines" : 0
          },
          "path" : "ContentView.swift"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "B0BC13AC-C3D8-43AA-B7EC-D84A69E06D97",
      "content" : "<write_to_file>\n<path>Bizpark\/Generated\/ContentView.swift<\/path>\n<content>\n1| import SwiftUI\n2| \n3| struct ContentView: View {\n4|     @StateObject private var viewModel = BusinessIdeasViewModel()\n5|     @State private var showingAddIdea = false\n6|     @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|     @State private var isAnimating = false\n8|     @AppStorage(\"isOnboardingComplete\") private var isOnboardingComplete = false\n9|     \n10|     var body: some View {\n11|         Group {\n12|             if !isOnboardingComplete {\n13|                 OnboardingView(isOnboardingComplete: $isOnboardingComplete)\n14|             } else {\n15|                 TabView {\n16|                     NotesView(viewModel: viewModel)\n17|                         .tabItem {\n18|                             Label(\"Notes\", systemImage: \"note.text\")\n19|                         }\n20|                     \n21|                     SettingsView()\n22|                         .tabItem {\n23|                             Label(\"Settings\", systemImage: \"gearshape.fill\")\n24|                         }\n25|                 }\n26|                 .preferredColorScheme(isDarkMode ? .dark : .light)\n27|             }\n28|         }\n29|     }\n30| }\n31| \n32| struct NotesView: View {\n33|     @ObservedObject var viewModel: BusinessIdeasViewModel\n34|     @State private var showingAddIdea = false\n35|     @State private var isAnimating = false\n36|     \n37|     var body: some View {\n38|         NavigationView {\n39|             ZStack {\n40|                 LinearGradient(\n41|                     gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n42|                     startPoint: .topLeading,\n43|                     endPoint: .bottomTrailing\n44|                 )\n45|                 .ignoresSafeArea()\n46|                 \n47|                 ScrollView {\n48|                     if viewModel.ideas.isEmpty {\n49|                         VStack(spacing: 20) {\n50|                             Image(systemName: \"lightbulb\")\n51|                                 .font(.system(size: 60))\n52|                                 .foregroundColor(.yellow)\n53|                                 .scaleEffect(isAnimating ? 1.1 : 1.0)\n54|                                 .animation(\n55|                                     Animation.easeInOut(duration: 1.0)\n56|                                         .repeatForever(autoreverses: true),\n57|                                     value: isAnimating\n58|                                 )\n59|                                 .onAppear {\n60|                                     isAnimating = true\n61|                                 }\n62|                             \n63|                             Text(\"No Business Ideas Yet\")\n64|                                 .font(.title2)\n65|                                 .fontWeight(.bold)\n66|                             \n67|                             Text(\"Tap the + button to add your first business idea!\")\n68|                                 .foregroundColor(.secondary)\n69|                                 .multilineTextAlignment(.center)\n70|                                 .padding(.horizontal)\n71|                         }\n72|                         .frame(maxWidth: .infinity, maxHeight: .infinity)\n73|                         .padding(.top, 100)\n74|                     } else {\n75|                         LazyVStack(spacing: 0) {\n76|                             ForEach(viewModel.ideas) { idea in\n77|                                 NavigationLink(destination: IdeaDetailView(viewModel: viewModel, idea: idea)) {\n78|                                     IdeaCardView(idea: idea)\n79|                                 }\n80|                             }\n81|                         }\n82|                         .padding(.vertical)\n83|                     }\n84|                 }\n85|                 \n86|                 if viewModel.showSuccessNotification {\n87|                     VStack {\n88|                         Spacer()\n89|                         HStack {\n90|                             Image(systemName: \"checkmark.circle.fill\")\n91|                                 .foregroundColor(.green)\n92|                             Text(\"Idea successfully added!\")\n93|                                 .foregroundColor(.white)\n94|                         }\n95|                         .padding()\n96|                         .background(Color.black.opacity(0.8))\n97|                         .cornerRadius(25)\n98|                         .padding(.bottom, 20)\n99|                     }\n100|                     .transition(.move(edge: .bottom))\n101|                     .animation(.spring(), value: viewModel.showSuccessNotification)\n102|                 }\n103|             }\n104|             .navigationTitle(\"Notes\")\n105|             .toolbar {\n106|                 ToolbarItem(placement: .navigationBarTrailing) {\n107|                     Button {\n108|                         showingAddIdea = true\n109|                     } label: {\n110|                         Image(systemName: \"plus.circle.fill\")\n111|                             .font(.title2)\n112|                     }\n113|                 }\n114|             }\n115|             .sheet(isPresented: $showingAddIdea) {\n116|                 AddIdeaView(viewModel: viewModel)\n117|             }\n118|         }\n119|     }\n120| }\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767611252.844813
    },
    {
      "id" : "299A69B5-44E5-4EE1-BDB5-E46966C55B05",
      "content" : "<usertask>Подпеши поле для опсиания в редактировании и добавлении заметки<\/usertask>",
      "role" : "user",
      "timestamp" : 767611319.252612
    },
    {
      "fileChanges" : [
        {
          "path" : "AddIdeaView.swift",
          "type" : "modified",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 7
          },
          "id" : "59B2F81E-FA44-4E9C-AEDF-BD15314229B6"
        },
        {
          "path" : "EditIdeaView.swift",
          "type" : "modified",
          "changes" : {
            "addedLines" : 7,
            "removedLines" : 0
          },
          "id" : "F8C56FEF-90F3-4B86-BFDC-026D07F31883"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "AA3EE411-0DDA-4DF8-8260-D7E70D7F6F60",
      "content" : "<write_to_file>\n<path>Bizpark\/Generated\/Views\/AddIdeaView.swift<\/path>\n<content>\n1| import SwiftUI\n2| \n3| struct AddIdeaView: View {\n4|     @Environment(\\.dismiss) private var dismiss\n5|     @Environment(\\.colorScheme) private var colorScheme\n6|     @ObservedObject var viewModel: BusinessIdeasViewModel\n7|     \n8|     @State private var title = \"\"\n9|     @State private var description = \"\"\n10|     @State private var budget = \"\"\n11|     \n12|     var body: some View {\n13|         NavigationView {\n14|             Form {\n15|                 Section {\n16|                     TextField(\"Idea Title\", text: $title)\n17|                         .font(.headline)\n18|                         .textFieldStyle(CustomTextFieldStyle())\n19|                     \n20|                     VStack(alignment: .leading) {\n21|                         Text(\"Description\")\n22|                             .font(.subheadline)\n23|                             .foregroundColor(.gray)\n24|                             .padding(.bottom, 4)\n25|                         \n26|                         TextEditor(text: $description)\n27|                             .frame(height: 150)\n28|                             .font(.body)\n29|                             .padding(8)\n30|                             .background(\n31|                                 RoundedRectangle(cornerRadius: 8)\n32|                                     .fill(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(.systemBackground))\n33|                             )\n34|                             .overlay(\n35|                                 RoundedRectangle(cornerRadius: 8)\n36|                                     .stroke(Color.gray.opacity(0.2), lineWidth: 1)\n37|                             )\n38|                     }\n39|                     \n40|                     TextField(\"Estimated Budget (Optional)\", text: $budget)\n41|                         .keyboardType(.decimalPad)\n42|                         .textFieldStyle(CustomTextFieldStyle())\n43|                 }\n44|             }\n45|             .scrollDismissesKeyboard(.immediately)\n46|             .navigationTitle(\"New Business Idea\")\n47|             .navigationBarTitleDisplayMode(.inline)\n48|             .toolbar {\n49|                 ToolbarItem(placement: .navigationBarLeading) {\n50|                     Button(\"Cancel\") {\n51|                         dismiss()\n52|                     }\n53|                 }\n54|                 \n55|                 ToolbarItem(placement: .navigationBarTrailing) {\n56|                     Button(\"Save\") {\n57|                         saveIdea()\n58|                     }\n59|                     .disabled(title.isEmpty || description.isEmpty)\n60|                 }\n61|             }\n62|         }\n63|     }\n64|     \n65|     private func saveIdea() {\n66|         let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n67|         viewModel.addIdea(\n68|             title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n69|             description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n70|             budget: budgetValue\n71|         )\n72|         dismiss()\n73|     }\n74| }\n75| \n76| struct CustomTextFieldStyle: TextFieldStyle {\n77|     @Environment(\\.colorScheme) private var colorScheme\n78|     \n79|     func _body(configuration: TextField<Self._Label>) -> some View {\n80|         configuration\n81|             .padding(12)\n82|             .background(\n83|                 RoundedRectangle(cornerRadius: 8)\n84|                     .fill(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(.systemBackground))\n85|             )\n86|             .overlay(\n87|                 RoundedRectangle(cornerRadius: 8)\n88|                     .stroke(Color.gray.opacity(0.2), lineWidth: 1)\n89|             )\n90|     }\n91| }\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Bizpark\/Generated\/Views\/EditIdeaView.swift<\/path>\n<content>\n1| import SwiftUI\n2| \n3| struct EditIdeaView: View {\n4|     @Environment(\\.dismiss) private var dismiss\n5|     @Environment(\\.colorScheme) private var colorScheme\n6|     @ObservedObject var viewModel: BusinessIdeasViewModel\n7|     let idea: BusinessIdea\n8|     \n9|     @State private var title: String\n10|     @State private var description: String\n11|     @State private var budget: String\n12|     \n13|     init(viewModel: BusinessIdeasViewModel, idea: BusinessIdea) {\n14|         self.viewModel = viewModel\n15|         self.idea = idea\n16|         _title = State(initialValue: idea.title)\n17|         _description = State(initialValue: idea.description)\n18|         _budget = State(initialValue: idea.budget.map { String(format: \"%.2f\", $0) } ?? \"\")\n19|     }\n20|     \n21|     var body: some View {\n22|         NavigationView {\n23|             Form {\n24|                 Section {\n25|                     TextField(\"Title\", text: $title)\n26|                         .font(.headline)\n27|                         .textFieldStyle(CustomTextFieldStyle())\n28|                     \n29|                     VStack(alignment: .leading) {\n30|                         Text(\"Description\")\n31|                             .font(.subheadline)\n32|                             .foregroundColor(.gray)\n33|                             .padding(.bottom, 4)\n34|                         \n35|                         TextEditor(text: $description)\n36|                             .frame(height: 150)\n37|                             .font(.body)\n38|                             .padding(8)\n39|                             .background(\n40|                                 RoundedRectangle(cornerRadius: 8)\n41|                                     .fill(colorScheme == .dark ? Color(UIColor.systemGray6) : Color(.systemBackground))\n42|                             )\n43|                             .overlay(\n44|                                 RoundedRectangle(cornerRadius: 8)\n45|                                     .stroke(Color.gray.opacity(0.2), lineWidth: 1)\n46|                             )\n47|                     }\n48|                     \n49|                     TextField(\"Budget (Optional)\", text: $budget)\n50|                         .keyboardType(.decimalPad)\n51|                         .textFieldStyle(CustomTextFieldStyle())\n52|                 }\n53|             }\n54|             .navigationTitle(\"Edit Idea\")\n55|             .navigationBarTitleDisplayMode(.inline)\n56|             .toolbar {\n57|                 ToolbarItem(placement: .navigationBarLeading) {\n58|                     Button(\"Cancel\") {\n59|                         dismiss()\n60|                     }\n61|                 }\n62|                 \n63|                 ToolbarItem(placement: .navigationBarTrailing) {\n64|                     Button(\"Save\") {\n65|                         saveIdea()\n66|                     }\n67|                     .disabled(title.isEmpty || description.isEmpty)\n68|                 }\n69|             }\n70|         }\n71|     }\n72|     \n73|     private func saveIdea() {\n74|         let budgetValue = Double(budget.replacingOccurrences(of: \",\", with: \".\"))\n75|         viewModel.updateIdea(\n76|             id: idea.id,\n77|             title: title.trimmingCharacters(in: .whitespacesAndNewlines),\n78|             description: description.trimmingCharacters(in: .whitespacesAndNewlines),\n79|             budget: budgetValue\n80|         )\n81|         dismiss()\n82|     }\n83| }\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767611355.14081
    },
    {
      "id" : "8EB06408-A16B-4782-AE00-CF1D5F7BC0C7",
      "content" : "<usertask>Сделай так, чтобы уведомление всплывали при редактировании и удалении заметки<\/usertask>",
      "role" : "user",
      "timestamp" : 767611577.458197
    },
    {
      "fileChanges" : [
        {
          "id" : "D9D01AAB-7AA5-407D-AC6A-8F70B6B9248C",
          "type" : "modified",
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 0
          },
          "path" : "ContentView.swift"
        },
        {
          "id" : "74C491D0-9C6E-47A2-BA40-81A47E21475D",
          "type" : "modified",
          "changes" : {
            "addedLines" : 9,
            "removedLines" : 0
          },
          "path" : "BusinessIdeasViewModel.swift"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "6FCA3D0D-CB21-4EC7-B56F-55224A8A612E",
      "content" : "<write_to_file>\n<path>Bizpark\/Generated\/ViewModels\/BusinessIdeasViewModel.swift<\/path>\n<content>\n1| import Foundation\n2| import SwiftUI\n3| \n4| class BusinessIdeasViewModel: ObservableObject {\n5|     @Published var ideas: [BusinessIdea] = []\n6|     @Published var showSuccessNotification = false\n7|     @Published var notificationMessage = \"\"\n8|     private let saveKey = \"SavedBusinessIdeas\"\n9|     \n10|     init() {\n11|         loadIdeas()\n12|     }\n13|     \n14|     func showNotification(_ message: String) {\n15|         notificationMessage = message\n16|         showSuccessNotification = true\n17|         \n18|         \/\/ Hide notification after 2 seconds\n19|         DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n20|             self.showSuccessNotification = false\n21|         }\n22|     }\n23|     \n24|     func addIdea(title: String, description: String, budget: Double? = nil) {\n25|         let idea = BusinessIdea(title: title, description: description, budget: budget)\n26|         ideas.insert(idea, at: 0)\n27|         saveIdeas()\n28|         showNotification(\"Idea successfully added!\")\n29|     }\n30|     \n31|     func updateIdea(id: UUID, title: String, description: String, budget: Double?) {\n32|         if let index = ideas.firstIndex(where: { $0.id == id }) {\n33|             ideas[index] = BusinessIdea(\n34|                 id: id,\n35|                 title: title,\n36|                 description: description,\n37|                 budget: budget,\n38|                 createdAt: ideas[index].createdAt\n39|             )\n40|             saveIdeas()\n41|             showNotification(\"Idea successfully updated!\")\n42|         }\n43|     }\n44|     \n45|     func deleteIdea(at offsets: IndexSet) {\n46|         ideas.remove(atOffsets: offsets)\n47|         saveIdeas()\n48|         showNotification(\"Idea successfully deleted!\")\n49|     }\n50|     \n51|     func deleteIdea(withId id: UUID) {\n52|         ideas.removeAll { $0.id == id }\n53|         saveIdeas()\n54|         showNotification(\"Idea successfully deleted!\")\n55|     }\n56|     \n57|     private func saveIdeas() {\n58|         if let encoded = try? JSONEncoder().encode(ideas) {\n59|             UserDefaults.standard.set(encoded, forKey: saveKey)\n60|         }\n61|     }\n62|     \n63|     private func loadIdeas() {\n64|         if let data = UserDefaults.standard.data(forKey: saveKey),\n65|            let decoded = try? JSONDecoder().decode([BusinessIdea].self, from: data) {\n66|             ideas = decoded\n67|         }\n68|     }\n69| }\n<\/content>\n<\/write_to_file>\n\n<write_to_file>\n<path>Bizpark\/Generated\/ContentView.swift<\/path>\n<content>\n1|  import SwiftUI\n2|  \n3|  struct ContentView: View {\n4|      @StateObject private var viewModel = BusinessIdeasViewModel()\n5|      @State private var showingAddIdea = false\n6|      @AppStorage(\"isDarkMode\") private var isDarkMode = false\n7|      @State private var isAnimating = false\n8|      @AppStorage(\"isOnboardingComplete\") private var isOnboardingComplete = false\n9|      \n10|      var body: some View {\n11|          Group {\n12|              if !isOnboardingComplete {\n13|                  OnboardingView(isOnboardingComplete: $isOnboardingComplete)\n14|              } else {\n15|                  TabView {\n16|                      NotesView(viewModel: viewModel)\n17|                          .tabItem {\n18|                              Label(\"Notes\", systemImage: \"note.text\")\n19|                          }\n20|                      \n21|                      SettingsView()\n22|                          .tabItem {\n23|                              Label(\"Settings\", systemImage: \"gearshape.fill\")\n24|                          }\n25|                  }\n26|                  .preferredColorScheme(isDarkMode ? .dark : .light)\n27|              }\n28|          }\n29|      }\n30|  }\n31|  \n32|  struct NotesView: View {\n33|      @ObservedObject var viewModel: BusinessIdeasViewModel\n34|      @State private var showingAddIdea = false\n35|      @State private var isAnimating = false\n36|      \n37|      var body: some View {\n38|          NavigationView {\n39|              ZStack {\n40|                  LinearGradient(\n41|                      gradient: Gradient(colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)]),\n42|                      startPoint: .topLeading,\n43|                      endPoint: .bottomTrailing\n44|                  )\n45|                  .ignoresSafeArea()\n46|                  \n47|                  ScrollView {\n48|                      if viewModel.ideas.isEmpty {\n49|                          VStack(spacing: 20) {\n50|                              Image(systemName: \"lightbulb\")\n51|                                  .font(.system(size: 60))\n52|                                  .foregroundColor(.yellow)\n53|                                  .scaleEffect(isAnimating ? 1.1 : 1.0)\n54|                                  .animation(\n55|                                      Animation.easeInOut(duration: 1.0)\n56|                                          .repeatForever(autoreverses: true),\n57|                                      value: isAnimating\n58|                                  )\n59|                                  .onAppear {\n60|                                      isAnimating = true\n61|                                  }\n62|                              \n63|                              Text(\"No Business Ideas Yet\")\n64|                                  .font(.title2)\n65|                                  .fontWeight(.bold)\n66|                              \n67|                              Text(\"Tap the + button to add your first business idea!\")\n68|                                  .foregroundColor(.secondary)\n69|                                  .multilineTextAlignment(.center)\n70|                                  .padding(.horizontal)\n71|                          }\n72|                          .frame(maxWidth: .infinity, maxHeight: .infinity)\n73|                          .padding(.top, 100)\n74|                      } else {\n75|                          LazyVStack(spacing: 0) {\n76|                              ForEach(viewModel.ideas) { idea in\n77|                                  NavigationLink(destination: IdeaDetailView(viewModel: viewModel, idea: idea)) {\n78|                                      IdeaCardView(idea: idea)\n79|                                  }\n80|                              }\n81|                          }\n82|                          .padding(.vertical)\n83|                      }\n84|                  }\n85|                  \n86|                  if viewModel.showSuccessNotification {\n87|                      VStack {\n88|                          Spacer()\n89|                          HStack {\n90|                              Image(systemName: \"checkmark.circle.fill\")\n91|                                  .foregroundColor(.green)\n92|                              Text(viewModel.notificationMessage)\n93|                                  .foregroundColor(.white)\n94|                          }\n95|                          .padding()\n96|                          .background(Color.black.opacity(0.8))\n97|                          .cornerRadius(25)\n98|                          .padding(.bottom, 20)\n99|                      }\n100|                      .transition(.move(edge: .bottom))\n101|                      .animation(.spring(), value: viewModel.showSuccessNotification)\n102|                  }\n103|              }\n104|              .navigationTitle(\"Notes\")\n105|              .toolbar {\n106|                  ToolbarItem(placement: .navigationBarTrailing) {\n107|                      Button {\n108|                          showingAddIdea = true\n109|                      } label: {\n110|                          Image(systemName: \"plus.circle.fill\")\n111|                              .font(.title2)\n112|                      }\n113|                  }\n114|              }\n115|              .sheet(isPresented: $showingAddIdea) {\n116|                  AddIdeaView(viewModel: viewModel)\n117|              }\n118|          }\n119|      }\n120|  }\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767611618.024199
    },
    {
      "id" : "07DE09DD-469E-492B-9F76-BF8D7673260B",
      "content" : "<usertask>Сделай так, чтобы удаление об изменении заметки висело дольше<\/usertask>",
      "role" : "user",
      "timestamp" : 767611701.471503
    },
    {
      "fileChanges" : [
        {
          "changes" : {
            "removedLines" : 0,
            "addedLines" : 0
          },
          "type" : "modified",
          "id" : "D2C24F3E-5185-4EEE-98AD-99A107240F61",
          "path" : "BusinessIdeasViewModel.swift"
        }
      ],
      "model" : "anthropic\/claude-3.5-sonnet",
      "id" : "C97304BC-845D-454C-ADA7-490EBA906779",
      "content" : "<write_to_file>\n<path>Bizpark\/Generated\/ViewModels\/BusinessIdeasViewModel.swift<\/path>\n<content>\n1|  import Foundation\n2|  import SwiftUI\n3|  \n4|  class BusinessIdeasViewModel: ObservableObject {\n5|      @Published var ideas: [BusinessIdea] = []\n6|      @Published var showSuccessNotification = false\n7|      @Published var notificationMessage = \"\"\n8|      private let saveKey = \"SavedBusinessIdeas\"\n9|      \n10|      init() {\n11|          loadIdeas()\n12|      }\n13|      \n14|      func showNotification(_ message: String) {\n15|          notificationMessage = message\n16|          showSuccessNotification = true\n17|          \n18|          \/\/ Hide notification after 4 seconds\n19|          DispatchQueue.main.asyncAfter(deadline: .now() + 4) {\n20|              self.showSuccessNotification = false\n21|          }\n22|      }\n23|      \n24|      func addIdea(title: String, description: String, budget: Double? = nil) {\n25|          let idea = BusinessIdea(title: title, description: description, budget: budget)\n26|          ideas.insert(idea, at: 0)\n27|          saveIdeas()\n28|          showNotification(\"Idea successfully added!\")\n29|      }\n30|      \n31|      func updateIdea(id: UUID, title: String, description: String, budget: Double?) {\n32|          if let index = ideas.firstIndex(where: { $0.id == id }) {\n33|              ideas[index] = BusinessIdea(\n34|                  id: id,\n35|                  title: title,\n36|                  description: description,\n37|                  budget: budget,\n38|                  createdAt: ideas[index].createdAt\n39|              )\n40|              saveIdeas()\n41|              showNotification(\"Idea successfully updated!\")\n42|          }\n43|      }\n44|      \n45|      func deleteIdea(at offsets: IndexSet) {\n46|          ideas.remove(atOffsets: offsets)\n47|          saveIdeas()\n48|          showNotification(\"Idea successfully deleted!\")\n49|      }\n50|      \n51|      func deleteIdea(withId id: UUID) {\n52|          ideas.removeAll { $0.id == id }\n53|          saveIdeas()\n54|          showNotification(\"Idea successfully deleted!\")\n55|      }\n56|      \n57|      private func saveIdeas() {\n58|          if let encoded = try? JSONEncoder().encode(ideas) {\n59|              UserDefaults.standard.set(encoded, forKey: saveKey)\n60|          }\n61|      }\n62|      \n63|      private func loadIdeas() {\n64|          if let data = UserDefaults.standard.data(forKey: saveKey),\n65|             let decoded = try? JSONDecoder().decode([BusinessIdea].self, from: data) {\n66|              ideas = decoded\n67|          }\n68|      }\n69|  }\n<\/content>\n<\/write_to_file>",
      "role" : "assistant",
      "timestamp" : 767611724.702196
    }
  ],
  "lastModified" : 767609919.119366,
  "id" : "6752F3FC-139C-4BB4-A593-A781C4EBFD29"
}